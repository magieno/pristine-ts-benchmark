import { HttpRequest } from "@aws-sdk/protocol-http";
export const injectEndpointIdMiddleware = (config) => (next, context) => async (args) => {
    if (typeof args.input.EndpointId === "undefined") {
    }
    else if (config.isCustomEndpoint) {
        context.signing_region = "*";
    }
    else if ((await config.useFipsEndpoint()) === true) {
        throw new Error("FIPS is not supported with EventBridge multi-region endpoints, please check the useFipsEndpoint configuration.");
    }
    else if (HttpRequest.isInstance(args.request)) {
        const endpointSuffix = getEndpointSuffix(args.request.hostname);
        if (!isValidHostnameComponent(args.input.EndpointId)) {
            throw new Error(`The EndpointId is not a valid domain name component, got ${args.input.EndpointId}.`);
        }
        args.request.hostname = `${args.input.EndpointId}.endpoint.events.${endpointSuffix}`;
        context.signing_region = "*";
    }
    return next(args);
};
const getEndpointSuffix = (endpoint) => {
    const EVENTS_ENDPOINT_PATTERN = /^(.+\.)?events(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    return endpoint.replace(new RegExp(EVENTS_ENDPOINT_PATTERN), "");
};
const isValidHostnameComponent = (component) => {
    const HOSTNAME_LABEL_PATTERN = /^[a-zA-Z0-9](([a-zA-Z0-9-]+)?[a-zA-Z0-9])?$/;
    for (const label of component.split(".")) {
        if (!HOSTNAME_LABEL_PATTERN.test(label) || label.length > 63) {
            return false;
        }
    }
    return true;
};
export const injectEndpointIdMiddlewareOptions = {
    step: "build",
    tags: ["ENDPOINT_ID"],
    name: "injectEndpointIdMiddleware",
    override: true,
};
export const getInjectEndpointIdPlugin = (options) => ({
    applyToStack: (operationStack) => {
        operationStack.add(injectEndpointIdMiddleware(options), injectEndpointIdMiddlewareOptions);
    },
});
