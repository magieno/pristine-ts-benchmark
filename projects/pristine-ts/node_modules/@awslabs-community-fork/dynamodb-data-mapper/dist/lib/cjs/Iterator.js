"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Iterator = void 0;
if (Symbol && !Symbol.asyncIterator) {
    Symbol.asyncIterator = Symbol.for("__@@asyncIterator__");
}
class Iterator {
    constructor(paginator) {
        this.paginator = paginator;
        this._count = 0;
        this.lastResolved = Promise.resolve();
        this.pending = [];
    }
    /**
     * @inheritDoc
     */
    [Symbol.asyncIterator]() {
        return this;
    }
    /**
     * @inheritDoc
     */
    next() {
        this.lastResolved = this.lastResolved.then(() => this.getNext());
        return this.lastResolved;
    }
    /**
     * Detaches the underlying paginator from this iterator and returns it. The
     * paginator will yield arrays of unmarshalled items, with each yielded
     * array corresponding to a single call to the underlying API. As with the
     * underlying API, pages may contain a variable number of items or no items,
     * in which case an empty array will be yielded.
     *
     * Calling this method will disable further iteration.
     */
    pages() {
        // Prevent the iterator from being used further and squelch any uncaught
        // promise rejection warnings
        this.lastResolved = Promise.reject(new Error('The underlying paginator has been detached from this iterator.'));
        this.lastResolved.catch(() => { });
        return this.paginator;
    }
    /**
     * @inheritDoc
     */
    return() {
        // Prevent any further use of this iterator
        this.lastResolved = Promise.reject(new Error('Iteration has been manually interrupted and may not be resumed'));
        this.lastResolved.catch(() => { });
        // Empty the pending queue to free up memory
        this.pending.length = 0;
        return this.paginator.return();
    }
    /**
     * Retrieve the reported capacity consumed by this iterator. Will be
     * undefined unless returned consumed capacity is requested.
     */
    get consumedCapacity() {
        return this.paginator.consumedCapacity;
    }
    /**
     * Retrieve the number of items yielded thus far by this iterator.
     */
    get count() {
        return this._count;
    }
    /**
     * Retrieve the number of items scanned thus far during the execution of
     * this iterator. This number should be the same as {@link count} unless a
     * filter expression was used.
     */
    get scannedCount() {
        return this.paginator.scannedCount;
    }
    getNext() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.pending.length > 0) {
                this.lastYielded = this.pending.shift();
                this._count++;
                return {
                    done: false,
                    value: this.lastYielded
                };
            }
            return this.paginator.next().then(({ value = [], done }) => {
                if (!done) {
                    this.pending.push(...value);
                    return this.getNext();
                }
                this.lastYielded = undefined;
                return { done: true };
            });
        });
    }
}
exports.Iterator = Iterator;
//# sourceMappingURL=Iterator.js.map