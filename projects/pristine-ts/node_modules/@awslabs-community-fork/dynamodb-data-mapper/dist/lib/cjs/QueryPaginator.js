"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryPaginator = void 0;
const marshallStartKey_1 = require("./marshallStartKey");
const Paginator_1 = require("./Paginator");
const protocols_1 = require("./protocols");
const dynamodb_query_iterator_1 = require("@awslabs-community-fork/dynamodb-query-iterator");
const dynamodb_data_marshaller_1 = require("@awslabs-community-fork/dynamodb-data-marshaller");
const dynamodb_expressions_1 = require("@awslabs-community-fork/dynamodb-expressions");
/**
 * Iterates over each page of items returned by a DynamoDB query until no more
 * pages are available.
 */
class QueryPaginator extends Paginator_1.Paginator {
    constructor(client, valueConstructor, keyCondition, options = {}) {
        const itemSchema = protocols_1.getSchema(valueConstructor.prototype);
        let { filter, indexName, limit, pageSize, projection, readConsistency, scanIndexForward, startKey, tableNamePrefix: prefix, } = options;
        const req = {
            TableName: protocols_1.getTableName(valueConstructor.prototype, prefix),
            ScanIndexForward: scanIndexForward,
            Limit: pageSize,
            IndexName: indexName,
        };
        if (readConsistency === 'strong') {
            req.ConsistentRead = true;
        }
        const attributes = new dynamodb_expressions_1.ExpressionAttributes();
        req.KeyConditionExpression = dynamodb_data_marshaller_1.marshallConditionExpression(normalizeKeyCondition(keyCondition), itemSchema, attributes).expression;
        if (filter) {
            req.FilterExpression = dynamodb_data_marshaller_1.marshallConditionExpression(filter, itemSchema, attributes).expression;
        }
        if (projection) {
            req.ProjectionExpression = dynamodb_data_marshaller_1.marshallProjectionExpression(projection, itemSchema, attributes).expression;
        }
        if (Object.keys(attributes.names).length > 0) {
            req.ExpressionAttributeNames = attributes.names;
        }
        if (Object.keys(attributes.values).length > 0) {
            req.ExpressionAttributeValues = attributes.values;
        }
        if (startKey) {
            req.ExclusiveStartKey = marshallStartKey_1.marshallStartKey(itemSchema, startKey);
        }
        super(new dynamodb_query_iterator_1.QueryPaginator(client, req, limit), valueConstructor);
    }
}
exports.QueryPaginator = QueryPaginator;
function normalizeKeyCondition(keyCondition) {
    if (dynamodb_expressions_1.isConditionExpression(keyCondition)) {
        return keyCondition;
    }
    const conditions = [];
    for (const property of Object.keys(keyCondition)) {
        const predicate = keyCondition[property];
        if (dynamodb_expressions_1.isConditionExpressionPredicate(predicate)) {
            conditions.push(Object.assign(Object.assign({}, predicate), { subject: property }));
        }
        else {
            conditions.push({
                type: 'Equals',
                subject: property,
                object: predicate,
            });
        }
    }
    if (conditions.length === 1) {
        return conditions[0];
    }
    return { type: 'And', conditions };
}
//# sourceMappingURL=QueryPaginator.js.map