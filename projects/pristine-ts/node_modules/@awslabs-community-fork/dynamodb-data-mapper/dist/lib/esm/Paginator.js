var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getSchema } from './protocols';
import { unmarshallItem, } from '@awslabs-community-fork/dynamodb-data-marshaller';
if (Symbol && !Symbol.asyncIterator) {
    Symbol.asyncIterator = Symbol.for("__@@asyncIterator__");
}
export class Paginator {
    constructor(paginator, valueConstructor) {
        this.paginator = paginator;
        this.valueConstructor = valueConstructor;
        this.lastResolved = Promise.resolve();
        this.itemSchema = getSchema(valueConstructor.prototype);
    }
    /**
     * @inheritDoc
     */
    [Symbol.asyncIterator]() {
        return this;
    }
    /**
     * @inheritDoc
     */
    next() {
        this.lastResolved = this.lastResolved.then(() => this.getNext());
        return this.lastResolved;
    }
    /**
     * @inheritDoc
     */
    return() {
        // Prevent any further use of this iterator
        this.lastResolved = Promise.reject(new Error('Iteration has been manually interrupted and may not be resumed'));
        this.lastResolved.catch(() => { });
        return this.paginator.return();
    }
    /**
     * Retrieve the reported capacity consumed by this paginator. Will be
     * undefined unless returned consumed capacity is requested.
     */
    get consumedCapacity() {
        return this.paginator.consumedCapacity;
    }
    /**
     * Retrieve the number of items yielded thus far by this paginator.
     */
    get count() {
        return this.paginator.count;
    }
    /**
     * Retrieve the last reported `LastEvaluatedKey`, unmarshalled according to
     * the schema used by this paginator.
     */
    get lastEvaluatedKey() {
        return this.lastKey;
    }
    /**
     * Retrieve the number of items scanned thus far during the execution of
     * this paginator. This number should be the same as {@link count} unless a
     * filter expression was used.
     */
    get scannedCount() {
        return this.paginator.scannedCount;
    }
    getNext() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.paginator.next().then(({ value = {}, done }) => {
                if (!done) {
                    this.lastKey = value.LastEvaluatedKey && unmarshallItem(this.itemSchema, value.LastEvaluatedKey, this.valueConstructor);
                    return {
                        value: (value.Items || []).map((item) => unmarshallItem(this.itemSchema, item, this.valueConstructor)),
                        done: false
                    };
                }
                return { done: true };
            });
        });
    }
}
//# sourceMappingURL=Paginator.js.map