import { marshallStartKey } from './marshallStartKey';
import { getSchema, getTableName } from './protocols';
import { marshallConditionExpression, marshallProjectionExpression, } from '@awslabs-community-fork/dynamodb-data-marshaller';
import { ExpressionAttributes } from '@awslabs-community-fork/dynamodb-expressions';
/**
 * @internal
 */
export function buildScanInput(valueConstructor, options = {}) {
    const { filter, indexName, pageSize, projection, readConsistency, segment, startKey, tableNamePrefix: prefix, totalSegments, } = options;
    const req = {
        TableName: getTableName(valueConstructor.prototype, prefix),
        Limit: pageSize,
        IndexName: indexName,
        Segment: segment,
        TotalSegments: totalSegments,
    };
    if (readConsistency === 'strong') {
        req.ConsistentRead = true;
    }
    const schema = getSchema(valueConstructor.prototype);
    const attributes = new ExpressionAttributes();
    if (filter) {
        req.FilterExpression = marshallConditionExpression(filter, schema, attributes).expression;
    }
    if (projection) {
        req.ProjectionExpression = marshallProjectionExpression(projection, schema, attributes).expression;
    }
    if (Object.keys(attributes.names).length > 0) {
        req.ExpressionAttributeNames = attributes.names;
    }
    if (Object.keys(attributes.values).length > 0) {
        req.ExpressionAttributeValues = attributes.values;
    }
    if (startKey) {
        req.ExclusiveStartKey = marshallStartKey(schema, startKey);
    }
    return req;
}
//# sourceMappingURL=buildScanInput.js.map