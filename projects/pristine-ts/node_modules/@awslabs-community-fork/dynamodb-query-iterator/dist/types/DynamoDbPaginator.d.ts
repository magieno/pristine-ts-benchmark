import { DynamoDbPaginatorInterface } from './DynamoDbPaginatorInterface';
import { DynamoDbResultsPage } from './DynamoDbResultsPage';
import { AttributeValue, ConsumedCapacity } from '@aws-sdk/client-dynamodb';
export declare abstract class DynamoDbPaginator implements DynamoDbPaginatorInterface {
    private readonly limit?;
    private _consumedCapacity?;
    private _count;
    private _lastKey?;
    private _scannedCount;
    private lastResolved;
    protected constructor(limit?: number | undefined);
    /**
     * @inheritDoc
     */
    [Symbol.asyncIterator](): AsyncIterableIterator<DynamoDbResultsPage>;
    /**
     * @inheritDoc
     */
    get consumedCapacity(): ConsumedCapacity | undefined;
    /**
     * @inheritDoc
     */
    get count(): number;
    /**
     * Get the LastEvaluatedKey of the last result page yielded by this
     * paginator or undefined if the scan has already been exhausted.
     */
    get lastEvaluatedKey(): {
        [key: string]: AttributeValue;
    } | undefined;
    /**
     * @inheritDoc
     */
    next(): Promise<IteratorResult<DynamoDbResultsPage>>;
    /**
     * @inheritDoc
     */
    return(): Promise<IteratorResult<DynamoDbResultsPage>>;
    /**
     * @inheritDoc
     */
    get scannedCount(): number;
    /**
     * Perform the next iteration
     */
    protected abstract getNext(): Promise<IteratorResult<DynamoDbResultsPage>>;
    protected getNextPageSize(requestedPageSize?: number): number | undefined;
}
