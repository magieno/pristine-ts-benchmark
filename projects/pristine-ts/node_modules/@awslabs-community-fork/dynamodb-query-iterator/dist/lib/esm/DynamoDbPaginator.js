import { mergeConsumedCapacities } from './mergeConsumedCapacities';
if (Symbol && !Symbol.asyncIterator) {
    Symbol.asyncIterator = Symbol.for("__@@asyncIterator__");
}
export class DynamoDbPaginator {
    constructor(limit) {
        this.limit = limit;
        this._count = 0;
        this._scannedCount = 0;
        this.lastResolved = Promise.resolve();
    }
    /**
     * @inheritDoc
     */
    [Symbol.asyncIterator]() {
        return this;
    }
    /**
     * @inheritDoc
     */
    get consumedCapacity() {
        return this._consumedCapacity;
    }
    /**
     * @inheritDoc
     */
    get count() {
        return this._count;
    }
    /**
     * Get the LastEvaluatedKey of the last result page yielded by this
     * paginator or undefined if the scan has already been exhausted.
     */
    get lastEvaluatedKey() {
        return this._lastKey;
    }
    /**
     * @inheritDoc
     */
    next() {
        this.lastResolved = this.lastResolved.then(() => {
            if (this.count >= (this.limit === undefined ? Infinity : this.limit)) {
                return { done: true };
            }
            return this.getNext().then(({ done, value }) => {
                if (value && !done) {
                    this._lastKey = value.LastEvaluatedKey;
                    this._count += (value.Items || []).length;
                    this._scannedCount += (value.ScannedCount || 0);
                    this._consumedCapacity = mergeConsumedCapacities(this._consumedCapacity, value.ConsumedCapacity);
                }
                return { value, done };
            });
        });
        return this.lastResolved;
    }
    /**
     * @inheritDoc
     */
    return() {
        // Prevent any further use of this iterator
        this.lastResolved = Promise.reject(new Error('Iteration has been manually interrupted and may not be resumed'));
        this.lastResolved.catch(() => { });
        return Promise.resolve({ done: true });
    }
    /**
     * @inheritDoc
     */
    get scannedCount() {
        return this._scannedCount;
    }
    getNextPageSize(requestedPageSize) {
        if (this.limit === undefined) {
            return requestedPageSize;
        }
        return Math.min(requestedPageSize === undefined ? Infinity : requestedPageSize, this.limit - this.count);
    }
}
//# sourceMappingURL=DynamoDbPaginator.js.map