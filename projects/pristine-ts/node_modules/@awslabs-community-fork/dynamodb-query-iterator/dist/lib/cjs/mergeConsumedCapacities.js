"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeConsumedCapacities = void 0;
/**
 * @internal
 */
function mergeConsumedCapacities(a, b) {
    if (a || b) {
        a = a || {};
        b = b || {};
        if ((a.TableName && b.TableName) && a.TableName !== b.TableName) {
            throw new Error('Consumed capacity reports may only be merged if they describe the same table');
        }
        return {
            TableName: a.TableName || b.TableName,
            CapacityUnits: (a.CapacityUnits || 0) + (b.CapacityUnits || 0),
            Table: mergeCapacities(a.Table, b.Table),
            LocalSecondaryIndexes: mergeCapacityMaps(a.LocalSecondaryIndexes, b.LocalSecondaryIndexes),
            GlobalSecondaryIndexes: mergeCapacityMaps(a.GlobalSecondaryIndexes, b.GlobalSecondaryIndexes),
        };
    }
}
exports.mergeConsumedCapacities = mergeConsumedCapacities;
function mergeCapacities(a, b) {
    if (a || b) {
        return {
            CapacityUnits: ((a && a.CapacityUnits) || 0) +
                ((b && b.CapacityUnits) || 0),
        };
    }
}
function mergeCapacityMaps(a, b) {
    if (a || b) {
        const out = {};
        a = a || {};
        b = b || {};
        const keys = new Set();
        for (const map of [a, b]) {
            for (const indexName of Object.keys(map)) {
                keys.add(indexName);
            }
        }
        for (const key of keys) {
            out[key] = mergeCapacities(a[key], b[key]);
        }
        return out;
    }
}
//# sourceMappingURL=mergeConsumedCapacities.js.map