export class ObjectSet {
    /**
     * Creates a new ObjectSet and optionally seeds it with values.
     *
     * @param iterable An optional iterable of values to add to the set.
     */
    constructor(iterable) {
        /**
         * Returns the string literal 'Set' for use by Object.prototype.toString.
         * This allows for identifying Sets without checking constructor identity.
         */
        this[Symbol.toStringTag] = 'Set';
        this._values = [];
        if (iterable) {
            for (let item of iterable) {
                this.add(item);
            }
        }
    }
    /**
     * Add a value to the set. If the value is already contained in the set, it
     * will not be added a second time.
     *
     * @param value The value to add
     */
    add(value) {
        if (!this.has(value)) {
            this._values.push(value);
        }
        return this;
    }
    /**
     * Remove all values from the set.
     */
    clear() {
        this._values = [];
    }
    /**
     * Returns an iterable two-member tuples for each item in the set, where
     * the item is provided twice.
     *
     * Part of the ES2015 Set specification for compatibility with Map objects.
     */
    entries() {
        return this._values.map(value => [value, value])[Symbol.iterator]();
    }
    /**
     * Invokes a callback once for each member of the set.
     *
     * @param callback The function to invoke with each set member
     * @param thisArg The `this` context on which to invoke the callback
     */
    forEach(callback, thisArg) {
        this._values.forEach((value, index, array) => {
            callback.call(thisArg, value, value, this);
        }, thisArg);
    }
    /**
     * Returns an IterableIterator of each member of the set.
     */
    keys() {
        return this[Symbol.iterator]();
    }
    /**
     * Returns the number of members in the set.
     */
    get size() {
        return this._values.length;
    }
    /**
     * Returns an IterableIterator of each member of the set.
     */
    values() {
        return this[Symbol.iterator]();
    }
    /**
     * Returns an IterableIterator of each member of the set.
     */
    [Symbol.iterator]() {
        return this._values[Symbol.iterator]();
    }
}
//# sourceMappingURL=ObjectSet.js.map