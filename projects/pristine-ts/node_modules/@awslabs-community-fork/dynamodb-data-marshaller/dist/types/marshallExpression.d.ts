import { Schema } from './Schema';
import { ConditionExpression, FunctionExpression, MathematicalExpression, ProjectionExpression, UpdateExpression, ExpressionAttributes } from '@awslabs-community-fork/dynamodb-expressions';
import { AttributeValue } from "@aws-sdk/client-dynamodb";
/**
 * A DynamoDB expression serialized to a string and accompanied by the name and
 * value substitutions that have been performed during serialization.
 */
export interface MarshalledExpression {
    /**
     * A serialized expression.
     */
    expression: string;
    /**
     * A map of name tokens => the property name for which the token has been
     * substituted in the serialized expression.
     */
    ExpressionAttributeNames: {
        [key: string]: string;
    };
    /**
     * A map of value tokens => the value for which the token has been
     * substituted in the serialized expression.
     */
    ExpressionAttributeValues: {
        [key: string]: AttributeValue;
    };
}
/**
 * Serialize a condition expression, substituting any property names for the
 * corresponding attribute names in the provided schema.
 *
 * @param expression The expression object to marshall.
 * @param schema The schema of the table to which the expression pertains.
 * @param attributes An optional ExpressionAttributes object to synchronize
 *                      substitutions across multiple expressions.
 */
export declare function marshallConditionExpression(expression: ConditionExpression, schema: Schema, attributes?: ExpressionAttributes): MarshalledExpression;
/**
 * Serialize a function expression, substituting any property names for the
 * corresponding attribute names in the provided schema.
 *
 * @param expression The expression object to marshall.
 * @param schema The schema of the table to which the expression pertains.
 * @param attributes An optional ExpressionAttributes object to synchronize
 *                      substitutions across multiple expressions.
 */
export declare function marshallFunctionExpression(expression: FunctionExpression, schema: Schema, attributes?: ExpressionAttributes): MarshalledExpression;
/**
 * Serialize a mathematical expression, substituting any property names for the
 * corresponding attribute names in the provided schema.
 *
 * @param expression The expression object to marshall.
 * @param schema The schema of the table to which the expression pertains.
 * @param attributes An optional ExpressionAttributes object to synchronize
 *                      substitutions across multiple expressions.
 */
export declare function marshallMathematicalExpression(expression: MathematicalExpression, schema: Schema, attributes?: ExpressionAttributes): MarshalledExpression;
/**
 * Serialize a projection expression, substituting any property names for the
 * corresponding attribute names in the provided schema.
 *
 * @param expression The expression object to marshall.
 * @param schema The schema of the table to which the expression pertains.
 * @param attributes An optional ExpressionAttributes object to synchronize
 *                      substitutions across multiple expressions.
 */
export declare function marshallProjectionExpression(expression: ProjectionExpression, schema: Schema, attributes?: ExpressionAttributes): MarshalledExpression;
/**
 * Serialize an update expression, substituting any property names for the
 * corresponding attribute names in the provided schema.
 *
 * @param expression The expression object to marshall.
 * @param schema The schema of the table to which the expression pertains.
 * @param attributes An optional ExpressionAttributes object to synchronize
 *                      substitutions across multiple expressions.
 */
export declare function marshallUpdateExpression(expression: UpdateExpression, schema: Schema, attributes?: ExpressionAttributes): MarshalledExpression;
