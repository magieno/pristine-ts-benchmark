import { InvalidSchemaError } from "./InvalidSchemaError";
import { BinarySet, Marshaller } from "@awslabs-community-fork/dynamodb-auto-marshaller";
/**
 * Unmarshall a DynamoDB item into a JavaScript value.
 *
 * @param schema            Metadata outlining the types to be expected
 *                          throughout the input
 * @param input             The value to unmarshall
 * @param valueConstructor  A zero-argument constructor used to create the
 *                          object onto which the input should be unmarshalled
 */
export function unmarshallItem(schema, input, valueConstructor) {
    const unmarshalled = valueConstructor
        ? new valueConstructor()
        : Object.create(null);
    for (const key of Object.keys(schema)) {
        const { attributeName = key } = schema[key];
        if (attributeName in input) {
            unmarshalled[key] = unmarshallValue(schema[key], input[attributeName]);
        }
    }
    return unmarshalled;
}
function unmarshallValue(schemaType, input) {
    switch (schemaType.type) {
        case 'Any':
        case 'Collection':
        case 'Hash':
            const { onEmpty = 'leave', onInvalid = 'throw', unwrapNumbers = false, } = schemaType;
            const autoMarshaller = new Marshaller({ onEmpty, onInvalid, unwrapNumbers });
            return autoMarshaller.unmarshallValue(input);
        case 'Binary':
            if (input.NULL) {
                return new Uint8Array(0);
            }
            return input.B;
        case 'Boolean':
            return input.BOOL;
        case 'Custom':
            return schemaType.unmarshall(input);
        case 'Date':
            return input.N ? new Date(Number(input.N) * 1000) : undefined;
        case 'Document':
            return input.M
                ? unmarshallItem(schemaType.members, input.M, schemaType.valueConstructor) : undefined;
        case 'List':
            return input.L ? unmarshallList(schemaType, input.L) : undefined;
        case 'Map':
            return input.M ? unmarshallMap(schemaType, input.M) : undefined;
        case 'Null':
            return input.NULL ? null : undefined;
        case 'Number':
            return typeof input.N === 'string' ? Number(input.N) : undefined;
        case 'Set':
            switch (schemaType.memberType) {
                case 'Binary':
                    if (input.NULL) {
                        return new BinarySet();
                    }
                    return typeof input.BS !== 'undefined'
                        ? new BinarySet(input.BS)
                        : undefined;
                case 'Number':
                    if (input.NULL) {
                        return new Set();
                    }
                    return input.NS ? unmarshallNumberSet(input.NS) : undefined;
                case 'String':
                    if (input.NULL) {
                        return new Set();
                    }
                    return input.SS ? unmarshallStringSet(input.SS) : undefined;
                default:
                    throw new InvalidSchemaError(schemaType, `Unrecognized set member type: ${schemaType}`);
            }
        case 'String':
            return input.NULL ? '' : input.S;
        case 'Tuple':
            return input.L ? unmarshallTuple(schemaType, input.L) : undefined;
    }
    throw new InvalidSchemaError(schemaType, 'Unrecognized schema node');
}
function unmarshallList(schemaType, input) {
    const list = [];
    for (const element of input) {
        list.push(unmarshallValue(schemaType.memberType, element));
    }
    return list;
}
function unmarshallMap(schemaType, input) {
    const map = new Map();
    for (const key of Object.keys(input)) {
        map.set(key, unmarshallValue(schemaType.memberType, input[key]));
    }
    return map;
}
function unmarshallNumberSet(input) {
    const set = new Set();
    for (const number of input) {
        set.add(Number(number));
    }
    return set;
}
function unmarshallStringSet(input) {
    const set = new Set();
    for (const string of input) {
        set.add(string);
    }
    return set;
}
function unmarshallTuple(schemaType, input) {
    const { members } = schemaType;
    const tuple = [];
    for (let i = 0; i < members.length; i++) {
        tuple.push(unmarshallValue(members[i], input[i]));
    }
    return tuple;
}
//# sourceMappingURL=unmarshallItem.js.map