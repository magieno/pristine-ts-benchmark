"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSchemaType = exports.KeyTypes = exports.TypeTags = void 0;
/**
 * The enumeration of types supported by this marshaller package.
 */
exports.TypeTags = {
    Any: 'Any',
    Binary: 'Binary',
    Boolean: 'Boolean',
    Collection: 'Collection',
    Custom: 'Custom',
    Date: 'Date',
    Document: 'Document',
    Hash: 'Hash',
    List: 'List',
    Map: 'Map',
    Null: 'Null',
    Number: 'Number',
    Set: 'Set',
    String: 'String',
    Tuple: 'Tuple',
};
function isBaseType(arg) {
    return Boolean(arg) && typeof arg === 'object'
        && typeof arg.type === 'string'
        && arg.type in exports.TypeTags
        && ['string', 'undefined'].indexOf(typeof arg.attributeName) > -1;
}
/**
 * The types of keys a given attribute can represent.
 */
exports.KeyTypes = {
    HASH: 'HASH',
    RANGE: 'RANGE',
};
function isKeyableType(arg) {
    const { keyType, indexKeyConfigurations } = arg;
    if (!(keyType === undefined || keyType in exports.KeyTypes)) {
        return false;
    }
    const idxKeysType = typeof indexKeyConfigurations;
    if (indexKeyConfigurations && idxKeysType === 'object') {
        for (const indexName of Object.keys(indexKeyConfigurations)) {
            if (!(indexKeyConfigurations[indexName] in exports.KeyTypes)) {
                return false;
            }
        }
        return true;
    }
    return idxKeysType === 'undefined';
}
function isSchemaType(arg, alreadyVisited = new Set()) {
    if (isBaseType(arg)) {
        if (alreadyVisited.has(arg)) {
            return true;
        }
        alreadyVisited.add(arg);
        switch (arg.type) {
            case 'Binary':
            case 'Date':
            case 'String':
                return isKeyableType(arg);
            case 'Custom':
                return isKeyableType(arg)
                    && typeof arg.marshall === 'function'
                    && typeof arg.unmarshall === 'function'
                    && [
                        void 0,
                        'S',
                        'N',
                        'B',
                    ].indexOf(arg.attributeType) > -1;
            case 'Document':
                return isDocumentType(arg, alreadyVisited);
            case 'List':
            case 'Map':
                return isSchemaType(arg.memberType, alreadyVisited);
            case 'Number':
                return isKeyableType(arg) && ['boolean', 'undefined']
                    .indexOf(typeof arg.versionAttribute) > -1;
            case 'Tuple':
                return isTupleType(arg, alreadyVisited);
            default:
                return true;
        }
    }
    return false;
}
exports.isSchemaType = isSchemaType;
function isDocumentType(arg, alreadyVisited) {
    const { valueConstructor, members } = arg;
    if (!members || typeof members !== 'object') {
        return false;
    }
    for (let key of Object.keys(members)) {
        if (!isSchemaType(members[key], alreadyVisited)) {
            return false;
        }
    }
    return ['function', 'undefined',].indexOf(typeof valueConstructor) > -1;
}
function isTupleType(arg, alreadyVisited) {
    const { members } = arg;
    if (!Array.isArray(members)) {
        return false;
    }
    for (let member of members) {
        if (!isSchemaType(member, alreadyVisited)) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=SchemaType.js.map