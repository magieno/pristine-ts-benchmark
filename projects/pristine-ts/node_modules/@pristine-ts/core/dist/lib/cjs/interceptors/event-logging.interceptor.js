"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventLoggingInterceptor = void 0;
const common_1 = require("@pristine-ts/common");
const tsyringe_1 = require("tsyringe");
const core_module_keyname_1 = require("../core.module.keyname");
/**
 * This class is an interceptor to log the events. It is module scoped to Core module.
 * It is tagged as an EventInterceptor so it can be automatically injected with the all the other EventInterceptors.
 */
let EventLoggingInterceptor = class EventLoggingInterceptor {
    constructor(logHandler) {
        this.logHandler = logHandler;
    }
    preMappingIntercept(event, executionContextInterface) {
        this.logHandler.info("Event just before the EventMapping into an Event object.", {
            event,
            executionContextInterface
        }, core_module_keyname_1.CoreModuleKeyname);
        return Promise.resolve(event);
    }
    postMappingIntercept(event) {
        this.logHandler.info("Event just after being mapped into an Event object.", {
            event,
        }, core_module_keyname_1.CoreModuleKeyname);
        return Promise.resolve(event);
    }
    preResponseMappingIntercept(eventResponse) {
        this.logHandler.info("Event response just after being dispatched to the Event Listeners.", {
            eventResponse,
        }, core_module_keyname_1.CoreModuleKeyname);
        return Promise.resolve(eventResponse);
    }
    postResponseMappingIntercept(eventResponse) {
        this.logHandler.info("Final event response that will be returned.", {
            eventResponse,
        }, core_module_keyname_1.CoreModuleKeyname);
        return Promise.resolve(eventResponse);
    }
};
EventLoggingInterceptor = __decorate([
    (0, tsyringe_1.injectable)(),
    (0, common_1.moduleScoped)(core_module_keyname_1.CoreModuleKeyname),
    (0, common_1.tag)(common_1.ServiceDefinitionTagEnum.EventInterceptor),
    __param(0, (0, tsyringe_1.inject)("LogHandlerInterface")),
    __metadata("design:paramtypes", [Object])
], EventLoggingInterceptor);
exports.EventLoggingInterceptor = EventLoggingInterceptor;
//# sourceMappingURL=event-logging.interceptor.js.map