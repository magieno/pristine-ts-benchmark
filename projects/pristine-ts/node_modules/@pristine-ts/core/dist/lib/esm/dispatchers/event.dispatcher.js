var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { injectable, injectAll, inject } from "tsyringe";
import { ServiceDefinitionTagEnum, tag } from "@pristine-ts/common";
import { CoreModuleKeyname } from "../core.module.keyname";
import { EventDispatcherNoEventHandlersError } from "../errors/event-dispatcher-no-event-handlers.error";
/**
 * This class receives all the event handlers and listeners that were registered and calls them if they support the event.
 */
let EventDispatcher = class EventDispatcher {
    /**
     * Dispatcher to dispatch the events to the event handlers that support them.
     * @param eventHandlers All the event handlers that are tagged with ServiceDefinitionTagEnum.EventHandler
     * @param eventListeners
     * @param logHandler
     */
    constructor(eventHandlers, eventListeners, logHandler) {
        this.eventHandlers = eventHandlers;
        this.eventListeners = eventListeners;
        this.logHandler = logHandler;
        this.eventHandlers.sort((a, b) => { var _a, _b; return ((_a = b.priority) !== null && _a !== void 0 ? _a : 0) - ((_b = a.priority) !== null && _b !== void 0 ? _b : 0); });
    }
    /**
     * This method receives an event, loops through its event handlers and listeners and if they support the event,
     * will call their handle method.
     * Resolves once all the event handlers and listeners have settled, but does not return a response.
     *
     * @param event
     */
    dispatch(event) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logHandler.debug("EventDispatcher - Dispatch the event - Start", {
                event,
                eventHandlers: this.eventHandlers,
                eventHandlerNames: this.eventHandlers.map(eventHandler => eventHandler.constructor.name),
            }, CoreModuleKeyname);
            // Notify the EventListeners that an event exists. The difference between a Handler and a Listener, is that a handler is
            // expected to return an EventResponse, while a listener doesn't return anything. An EventListener simply does passive listening.
            const eventListenerPromises = [];
            this.eventListeners.forEach(eventListener => {
                if (eventListener.supports(event)) {
                    eventListenerPromises.push(eventListener.execute(event));
                }
            });
            const supportingEventHandlers = [];
            for (const eventHandler of this.eventHandlers) {
                if (eventHandler.supports(event)) {
                    this.logHandler.debug("EventDispatcher - The EventHandler supports the event", {
                        event,
                        eventHandler: eventHandler,
                        eventHandlerName: eventHandler.constructor.name,
                    }, CoreModuleKeyname);
                    supportingEventHandlers.push(eventHandler);
                    break;
                }
                else {
                    this.logHandler.debug("EventDispatcher - The EventHandler doesn't support the event", {
                        event,
                        eventHandler: eventHandler,
                        eventHandlerName: eventHandler.constructor.name,
                    }, CoreModuleKeyname);
                }
            }
            if (supportingEventHandlers.length === 0) {
                throw new EventDispatcherNoEventHandlersError("There are no EventHandlers that support this event.", event);
            }
            else if (supportingEventHandlers.length > 1) {
                this.logHandler.warning("EventDispatcher - There are more than one EventHandler that support this event. The first one will be used.");
            }
            this.logHandler.debug("EventDispatcher - Calling EventHandler - Start", {
                event,
            });
            // We only support executing the handler with the highest priority.
            const eventResponse = yield supportingEventHandlers[0].handle(event);
            this.logHandler.debug("EventDispatcher - Calling EventHandler - End", {
                event,
                eventResponse,
            });
            yield Promise.allSettled(eventListenerPromises);
            return eventResponse;
        });
    }
};
EventDispatcher = __decorate([
    tag("EventDispatcherInterface"),
    injectable(),
    __param(0, injectAll(ServiceDefinitionTagEnum.EventHandler)),
    __param(1, injectAll(ServiceDefinitionTagEnum.EventListener)),
    __param(2, inject("LogHandlerInterface")),
    __metadata("design:paramtypes", [Array, Array, Object])
], EventDispatcher);
export { EventDispatcher };
//# sourceMappingURL=event.dispatcher.js.map