import { EventInterceptorInterface } from "../interfaces/event-interceptor.interface";
import { LogHandlerInterface } from "@pristine-ts/logging";
import { Event } from "../models/event";
import { ExecutionContextInterface } from "../interfaces/execution-context.interface";
import { EventResponse } from "../models/event.response";
/**
 * This class is an interceptor to log the events. It is module scoped to Core module.
 * It is tagged as an EventInterceptor so it can be automatically injected with the all the other EventInterceptors.
 */
export declare class EventLoggingInterceptor implements EventInterceptorInterface {
    private readonly logHandler;
    constructor(logHandler: LogHandlerInterface);
    preMappingIntercept(event: object, executionContextInterface: ExecutionContextInterface<any>): Promise<object>;
    postMappingIntercept(event: Event<any>): Promise<Event<any>>;
    preResponseMappingIntercept(eventResponse: EventResponse<any, any>): Promise<EventResponse<any, any>>;
    postResponseMappingIntercept(eventResponse: object): Promise<object>;
}
