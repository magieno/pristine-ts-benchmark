import "reflect-metadata";
import { DependencyContainer } from "tsyringe";
import { AppModuleInterface, Request } from "@pristine-ts/common";
import { ModuleConfigurationValue } from "@pristine-ts/configuration";
import { ExecutionContextInterface } from "./interfaces/execution-context.interface";
import { Event } from "./models/event";
/**
 * This is the central class that manages the lifecyle of this library.
 */
export declare class Kernel {
    /**
     * Contains a reference to the root Dependency Injection Container.
     */
    container: DependencyContainer;
    /**
     * Contains a map of all the modules that were instantiated indexed by the modules names.
     * @private
     */
    private instantiatedModules;
    /**
     * Contains a map of all the modules that the afterInit was run for, indexed by the modules names .
     * @private
     */
    private afterInstantiatedModules;
    /**
     * Contains the span for the initialization.
     * @private
     */
    private initializationSpan?;
    /**
     * Contains the unique instantiation identifier of this specific kernel instance.
     * @public
     */
    instantiationId: string;
    /**
     * This function is the entry point of the Kernel. It initializes the module for your application (AppModule) as well as its the dependencies,
     * it registers the services, registers the configurations and runs the afterInit for each module.
     * @param module
     * @param moduleConfigurationValues
     */
    start(module: AppModuleInterface, moduleConfigurationValues?: {
        [key: string]: ModuleConfigurationValue;
    }): Promise<void>;
    /**
     * Registers the provider registration in the container.
     * @param providerRegistration
     * @private
     */
    private registerProviderRegistration;
    /**
     * This method receives a module and recursively calls back this method with the module dependencies
     * specified as imported by the module.
     *
     * This method also registers all the service definitions in the container.
     *
     * @param module
     * @private
     */
    private initModule;
    /**
     * Registers all the configuration definitions that all the modules have defined.
     * @param moduleConfigurationValues
     * @private
     */
    private initConfiguration;
    /**
     * This method receives a module and recursively calls back this method with the module dependencies
     * specified as imported by the module.
     *
     * @param module
     * @private
     */
    private afterInitModule;
    /**
     * This method loops through the service tag decorators defined in the taggedProviderRegistrationsRegistry and simply add
     * all the entry to the container.
     * @private
     */
    private registerServiceTags;
    /**
     *
     * @param event
     * @param executionContext
     */
    handle<T>(event: any | Request | Event<any>, executionContext: ExecutionContextInterface<T>): Promise<object>;
}
