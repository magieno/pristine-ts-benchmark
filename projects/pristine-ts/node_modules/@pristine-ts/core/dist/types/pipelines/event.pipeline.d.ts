import { DependencyContainer } from "tsyringe";
import { ExecutionContextInterface } from "../interfaces/execution-context.interface";
import { EventInterceptorInterface } from "../interfaces/event-interceptor.interface";
import { EventMapperInterface } from "../interfaces/event-mapper.interface";
import { LogHandlerInterface } from "@pristine-ts/logging";
import { TracingManagerInterface } from "@pristine-ts/telemetry";
export declare class EventPipeline {
    private readonly eventInterceptors;
    private readonly eventMappers;
    private readonly logHandler;
    private readonly tracingManager;
    constructor(eventInterceptors: EventInterceptorInterface[], eventMappers: EventMapperInterface<any, any>[], logHandler: LogHandlerInterface, tracingManager: TracingManagerInterface);
    /**
     * This method calls the interceptors that are to be executed just before the EventMappers are executed. It allows
     * for changing the raw event coming directly into the kernel.
     *
     * @param event
     * @param executionContext
     * @private
     */
    private preMappingIntercept;
    /**
     * This method calls the interceptors that are executed just after the EventMappers have mapped the raw event into
     * an Event object.
     *
     * @param event
     * @private
     */
    private postMappingIntercept;
    /**
     * This method calls the interceptors that are to be executed just after the EventResponse has been returned from
     * the EventDispatcher but before it is reverse mapped by the EventMappers.
     *
     * @param eventResponse
     * @private
     */
    private preResponseMappingIntercept;
    /**
     * This method calls the interceptors that are executed after the EventResponse object has been mapped into a simple
     * object.
     *
     * @param eventResponse The event response object to be returned from the handle method in the kernel.
     * @private
     */
    private postResponseMappingIntercept;
    /**
     * This method executes the postMappingInterceptors and then dispatches the Event by using the EventDispatcher.
     *
     * @param event This is the event that must be dispatched.
     * @param eventDispatcher This is the eventDispatcher instance that will dispatch the Event.
     * @private
     */
    private executeEvent;
    /**
     *
     * @param event
     * @param executionContext
     * @param container
     */
    execute(event: object, executionContext: ExecutionContextInterface<any>, container: DependencyContainer): Promise<any>;
}
