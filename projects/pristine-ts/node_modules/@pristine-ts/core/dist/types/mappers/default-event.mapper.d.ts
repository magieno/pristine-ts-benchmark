import { EventMapperInterface } from "../interfaces/event-mapper.interface";
import { ExecutionContextInterface } from "../interfaces/execution-context.interface";
import { EventsExecutionOptionsInterface } from "../interfaces/events-execution-options.interface";
import { EventResponse } from "../models/event.response";
/**
 * We need a default mapper, else the container will complain when we do injectAll
 */
export declare class DefaultEventMapper implements EventMapperInterface<any, any> {
    map(event: object, executionContext: ExecutionContextInterface<any>): EventsExecutionOptionsInterface<any>;
    reverseMap(eventResponse: EventResponse<any, any>, response: object, executionContext: ExecutionContextInterface<any>): void;
    supportsMapping(event: object, executionContext: ExecutionContextInterface<any>): boolean;
    supportsReverseMapping(eventResponse: EventResponse<any, any>, response: object, executionContext: ExecutionContextInterface<any>): boolean;
}
