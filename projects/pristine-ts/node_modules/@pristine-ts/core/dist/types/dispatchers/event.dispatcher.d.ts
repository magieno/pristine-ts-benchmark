import { Event } from "../models/event";
import { LogHandlerInterface } from "@pristine-ts/logging";
import { EventHandlerInterface } from "../interfaces/event-handler.interface";
import { EventResponse } from "../models/event.response";
import { EventDispatcherInterface } from "../interfaces/event-dispatcher.interface";
import { EventListenerInterface } from "../interfaces/event-listener.interface";
/**
 * This class receives all the event handlers and listeners that were registered and calls them if they support the event.
 */
export declare class EventDispatcher implements EventDispatcherInterface {
    private readonly eventHandlers;
    private readonly eventListeners;
    private readonly logHandler;
    /**
     * Dispatcher to dispatch the events to the event handlers that support them.
     * @param eventHandlers All the event handlers that are tagged with ServiceDefinitionTagEnum.EventHandler
     * @param eventListeners
     * @param logHandler
     */
    constructor(eventHandlers: EventHandlerInterface<any, any>[], eventListeners: EventListenerInterface[], logHandler: LogHandlerInterface);
    /**
     * This method receives an event, loops through its event handlers and listeners and if they support the event,
     * will call their handle method.
     * Resolves once all the event handlers and listeners have settled, but does not return a response.
     *
     * @param event
     */
    dispatch(event: Event<any>): Promise<EventResponse<any, any>>;
}
