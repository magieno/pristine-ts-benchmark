"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryModule = void 0;
const telemetry_module_keyname_1 = require("./telemetry.module.keyname");
const logging_1 = require("@pristine-ts/logging");
const configuration_1 = require("@pristine-ts/configuration");
const common_1 = require("@pristine-ts/common");
__exportStar(require("./enums/enums"), exports);
__exportStar(require("./interfaces/interfaces"), exports);
__exportStar(require("./managers/managers"), exports);
__exportStar(require("./models/models"), exports);
__exportStar(require("./tracers/tracers"), exports);
exports.TelemetryModule = {
    keyname: telemetry_module_keyname_1.TelemetryModuleKeyname,
    importModules: [
        common_1.CommonModule,
        logging_1.LoggingModule,
    ],
    providerRegistrations: [],
    configurationDefinitions: [
        /**
         * Whether or not tracing is activated.
         */
        {
            parameterName: telemetry_module_keyname_1.TelemetryModuleKeyname + ".active",
            defaultValue: true,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.BooleanResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_TRACING_IS_ACTIVE")),
            ]
        },
        /**
         * Whether or not tracing is in debug mode, meaning that it should output logs with the debug severity about the trace and spans.
         * This can be set to false to prevent having to much logs for every single span created.
         */
        {
            parameterName: telemetry_module_keyname_1.TelemetryModuleKeyname + ".debug",
            defaultValue: false,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.BooleanResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_TRACING_DEBUG")),
            ]
        }
    ]
};
//# sourceMappingURL=telemetry.module.js.map