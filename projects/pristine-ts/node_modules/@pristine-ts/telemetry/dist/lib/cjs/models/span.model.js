"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Span = void 0;
const uuid_1 = require("uuid");
/**
 * This model represents a span.
 */
class Span {
    /**
     * This model represents a span.
     * @param keyname The keyname of the span.
     * @param id The unique id of the span.
     * @param context The context to associate with the span.
     */
    constructor(keyname, id, context) {
        this.keyname = keyname;
        /**
         * The timestamp in milliseconds at which the span was started.
         */
        this.startDate = Date.now();
        /**
         * The children spans.
         */
        this.children = [];
        /**
         * The context associated with the span.
         */
        this.context = {};
        /**
         * Whether or not the span is in progress, meaning it has not ended.
         */
        this.inProgress = true;
        this.id = id !== null && id !== void 0 ? id : (0, uuid_1.v4)();
        this.context = context !== null && context !== void 0 ? context : {};
    }
    /**
     * This method returns the duration of the span in milliseconds.
     */
    getDuration() {
        var _a;
        return ((_a = this.endDate) !== null && _a !== void 0 ? _a : Date.now()) - this.startDate;
    }
    /**
     * This method ends the span.
     */
    end() {
        var _a;
        (_a = this.tracingManager) === null || _a === void 0 ? void 0 : _a.endSpan(this);
    }
    /**
     * This method sets the trace for the span and all of its children.
     * @param trace The trace the span should be attached to.
     */
    setTrace(trace) {
        this.trace = trace;
        this.children.forEach(childSpan => childSpan.setTrace(trace));
    }
    /**
     * This method adds a child span to the current span. It only adds it if it's not already part of the children.
     * @param span The span to add as a child.
     */
    addChild(span) {
        const existingChildSpan = this.children.find(childSpan => childSpan.id === span.id);
        if (existingChildSpan) {
            return;
        }
        span.parentSpan = this;
        this.children.push(span);
    }
}
exports.Span = Span;
//# sourceMappingURL=span.model.js.map