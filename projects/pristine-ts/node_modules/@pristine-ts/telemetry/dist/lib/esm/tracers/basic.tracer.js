var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { injectable } from "tsyringe";
import { ServiceDefinitionTagEnum, tag } from "@pristine-ts/common";
import { Readable } from "stream";
/**
 * We need this to have at least one tracer so the @injectAll(ServiceDefinitionTagEnum.Tracer) does not fail
 * Until there's a fix for: https://github.com/microsoft/tsyringe/issues/63
 */
let XrayTracer = class XrayTracer {
    constructor() {
        this.spanStartedStream = new Readable({
            objectMode: true,
            read(size) {
                return true;
            }
        });
        this.spanEndedStream = new Readable({
            objectMode: true,
            read(size) {
                return true;
            }
        });
        this.traceStartedStream = new Readable({
            objectMode: true,
            read(size) {
                return true;
            }
        });
        this.traceEndedStream = new Readable({
            objectMode: true,
            read(size) {
                return true;
            }
        });
    }
};
XrayTracer = __decorate([
    tag(ServiceDefinitionTagEnum.Tracer),
    injectable()
], XrayTracer);
export { XrayTracer };
//# sourceMappingURL=basic.tracer.js.map