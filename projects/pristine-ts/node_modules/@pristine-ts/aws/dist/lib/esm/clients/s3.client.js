var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { inject, injectable } from "tsyringe";
import { moduleScoped, tag } from "@pristine-ts/common";
import { AwsModuleKeyname } from "../aws.module.keyname";
import { GetObjectCommand, ListObjectsCommand, PutObjectCommand, S3Client as AWSS3Client } from "@aws-sdk/client-s3";
import { S3PresignedOperationTypeEnum } from "../enums/s3-presigned-operation-type.enum";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
/**
 * The client to use to interact with AWS S3. It is a wrapper around the AWSS3Client of @aws-sdk/client-s3.
 * It is tagged so it can be injected using S3ClientInterface.
 */
let S3Client = class S3Client {
    /**
     * The client to use to interact with AWS S3. It is a wrapper around the AWSS3Client of @aws-sdk/client-s3.
     * @param logHandler The log handler used to output logs.
     * @param region The aws region for which the client will be used.
     */
    constructor(logHandler, region) {
        this.logHandler = logHandler;
        this.region = region;
    }
    /**
     * Returns the instantiated AWSS3Client from the @aws-sdk/client-s3 library
     */
    getClient() {
        var _a;
        return this.client = (_a = this.client) !== null && _a !== void 0 ? _a : new AWSS3Client({ region: this.region });
    }
    /**
     * Gets an object and all its details from S3.
     * @param bucketName The bucket name where to get the object.
     * @param key The key of the object.
     */
    get(bucketName, key) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logHandler.debug("S3 CLIENT - Getting item", { bucketName, key }, AwsModuleKeyname);
            const command = new GetObjectCommand({
                Bucket: bucketName,
                Key: key,
            });
            try {
                return this.getClient().send(command);
            }
            catch (e) {
                this.logHandler.error("Error getting object from S3", { error: e }, AwsModuleKeyname);
                throw e;
            }
        });
    }
    /**
     * Gets an object's body as an array buffer from S3.
     * @param bucketName The bucket name where to get the object.
     * @param key The key of the object.
     */
    getObjectBodyAsArrayBuffer(bucketName, key) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const object = yield this.get(bucketName, key);
                return this.streamToArrayBuffer(object.Body);
            }
            catch (e) {
                this.logHandler.error("Error getting content of object from S3", { error: e }, AwsModuleKeyname);
                throw e;
            }
        });
    }
    /**
     * Lists the keys of a bucket.
     * @param bucketName The name of the bucket.
     */
    listKeys(bucketName) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logHandler.debug("S3 CLIENT - Listing bucket keys", { bucketName }, AwsModuleKeyname);
            const objects = yield this.listObjects(bucketName);
            return objects.map((object) => object.Key);
        });
    }
    /**
     * Lists the object of a bucket.
     * @param bucketName The name of the bucket.
     */
    listObjects(bucketName) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.logHandler.debug("S3 CLIENT - Listing bucket objects", { bucketName }, AwsModuleKeyname);
            const command = new ListObjectsCommand({
                Bucket: bucketName,
            });
            let objects;
            try {
                objects = yield this.getClient().send(command);
            }
            catch (e) {
                this.logHandler.error("Error listing objects from S3", { error: e }, AwsModuleKeyname);
                throw e;
            }
            return (_a = objects.Contents) !== null && _a !== void 0 ? _a : [];
        });
    }
    /**
     * Uploads an object to a bucket of S3.
     * @param bucketName The name of the bucket.
     * @param key The key for the new object.
     * @param data The data to upload.
     * @param contentEncoding The encoding of the data to upload.
     * @param contentType The content type of the data to upload.
     */
    upload(bucketName, key, data, contentEncoding, contentType) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logHandler.debug("S3 CLIENT - Uploading object", { bucketName, key, data, contentEncoding, contentType }, AwsModuleKeyname);
            const command = new PutObjectCommand({
                Bucket: bucketName,
                Key: key,
                Body: data,
                ContentType: contentType,
                ContentEncoding: contentEncoding,
            });
            try {
                yield this.getClient().send(command);
            }
            catch (e) {
                this.logHandler.error("Error putting object in S3", { error: e }, AwsModuleKeyname);
                throw e;
            }
        });
    }
    /**
     * Creates a pre signed url to allow a third party to take action on S3.
     * @param bucketName The name of the bucket.
     * @param key The key for the object on which the action will be allowed.
     * @param operation The operation that will be allowed.
     * @param fileName If operation is Get, then a filename can be provided for the name of the file that will be downloaded.
     * @param expiresIn The amount on time in seconds before the pre signed url expires.
     */
    createSignedUrl(bucketName, key, operation, fileName, expiresIn = 300) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logHandler.debug("S3 CLIENT - Creating pre-signed url", { bucketName, key, operation, fileName, expiresIn }, AwsModuleKeyname);
            const command = this.getCommandForPresign(operation, bucketName, key, fileName);
            let url;
            try {
                url = yield getSignedUrl(this.getClient(), command, { expiresIn });
            }
            catch (e) {
                this.logHandler.error("Error getting signed url.", { error: e }, AwsModuleKeyname);
                throw e;
            }
            return url;
        });
    }
    /**
     * Creates the S3 command for a pre signed url.
     * @param operation The operation that the pre signed url will allow.
     * @param bucketName The name of the bucket.
     * @param key The key for the object on which the action will be allowed.
     * @param fileName If operation is Get, then a filename can be provided for the name of the file that will be downloaded.
     * @private
     */
    getCommandForPresign(operation, bucketName, key, fileName) {
        this.logHandler.debug("S3 CLIENT - Creating command for pre-signed url", { operation, bucketName, key, fileName }, AwsModuleKeyname);
        switch (operation) {
            case S3PresignedOperationTypeEnum.Get:
                return new GetObjectCommand({
                    Bucket: bucketName,
                    Key: key,
                    // This specifies the name of the file that will be downloaded rather than using the key.
                    ResponseContentDisposition: fileName ? `attachment; filename=${fileName}` : undefined,
                });
            case S3PresignedOperationTypeEnum.Upload:
                return new PutObjectCommand({
                    Bucket: bucketName,
                    Key: key,
                });
        }
    }
    /**
     * Transforms a stream to an array buffer.
     * @param stream The stream to transform.
     * @private
     */
    streamToArrayBuffer(stream) {
        return __awaiter(this, void 0, void 0, function* () {
            const chunks = [];
            return new Promise((resolve, reject) => {
                stream.on('data', (chunk) => chunks.push(Buffer.from(chunk)));
                stream.on('error', (err) => reject(err));
                stream.on('end', () => resolve(Buffer.concat(chunks).buffer));
            });
        });
    }
};
S3Client = __decorate([
    tag("S3ClientInterface"),
    moduleScoped(AwsModuleKeyname),
    injectable(),
    __param(0, inject("LogHandlerInterface")),
    __param(1, inject("%pristine.aws.region%")),
    __metadata("design:paramtypes", [Object, String])
], S3Client);
export { S3Client };
//# sourceMappingURL=s3.client.js.map