var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { dynamicTableNameRegistry } from "./decorators/dynamic-table-name.decorator";
import { DynamoDbTable } from "@awslabs-community-fork/dynamodb-data-mapper";
import { LoggingModule } from "@pristine-ts/logging";
import { AwsModuleKeyname } from "./aws.module.keyname";
import { EnvironmentVariableResolver } from "@pristine-ts/configuration";
import { CoreModule } from "@pristine-ts/core";
export * from "./clients/clients";
export * from "./decorators/decorators";
export * from "./enums/enums";
export * from "./errors/errors";
export * from "./event-payloads/event-payloads";
export * from "./interfaces/interfaces";
export * from "./mappers/mappers";
export * from "./models/models";
export * from "./options/options";
export * from "./resolvers/resolvers";
export * from "./results/results";
export * from "./aws.module.keyname";
export const AwsModule = {
    keyname: AwsModuleKeyname,
    configurationDefinitions: [
        /**
         * The AWS region used.
         */
        {
            parameterName: AwsModuleKeyname + ".region",
            isRequired: false,
            defaultValue: "us-east-1",
            defaultResolvers: [
                new EnvironmentVariableResolver("AWS_REGION"),
            ]
        },
    ],
    importModules: [
        LoggingModule,
        CoreModule,
    ],
    providerRegistrations: [],
    afterInit(container) {
        return __awaiter(this, void 0, void 0, function* () {
            yield registerDynamicTableNames(container);
        });
    }
};
/**
 * This method takes all the classes that were added to the dynamicTableNameRegistry and resolves the name of the table from the dependency container and sets the DynamoDbTable to this name.
 * @param container The dependency container.
 */
const registerDynamicTableNames = (container) => __awaiter(void 0, void 0, void 0, function* () {
    for (const dynamicTableName of dynamicTableNameRegistry) {
        // If the token name is not already registered in the container, we try to resolve it from the environment variables.
        if (container.isRegistered(dynamicTableName.tokenName) === false) {
            const logHandler = container.resolve("LogHandlerInterface");
            try {
                logHandler.debug("The table token name was not registered, trying to load default.", { tokenName: dynamicTableName.tokenName }, AwsModuleKeyname);
                const value = yield new EnvironmentVariableResolver(dynamicTableName.tokenName).resolve();
                container.registerInstance(dynamicTableName.tokenName, value);
                logHandler.debug("Successfully registered table name.", { tokenName: dynamicTableName.tokenName, value }, AwsModuleKeyname);
            }
            catch (e) {
                logHandler.warning("The table token name does not exist in the container.", { tokenName: dynamicTableName.tokenName }, AwsModuleKeyname);
                continue;
            }
        }
        // Set the DynamoDbTable symbol with the name of the table.
        try {
            dynamicTableName.classConstructor.prototype[DynamoDbTable] = container.resolve(dynamicTableName.tokenName);
        }
        catch (error) {
            const logHandler = container.resolve("LogHandlerInterface");
            logHandler.error("Error resolving the dynamic table token name", { error, tokenName: dynamicTableName.tokenName }, AwsModuleKeyname);
            continue;
        }
    }
});
//# sourceMappingURL=aws.module.js.map