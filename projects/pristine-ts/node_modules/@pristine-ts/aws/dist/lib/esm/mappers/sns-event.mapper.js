var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Event } from "@pristine-ts/core";
import { moduleScoped, ServiceDefinitionTagEnum, tag } from "@pristine-ts/common";
import { injectable } from "tsyringe";
import { SnsEventPayload } from "../event-payloads/sns.event-payload";
import { SnsEventType } from "../enums/sns-event-type.enum";
import { SnsModel } from "../models/sns.model";
import { SnsMessageAttributeModel } from "../models/sns-message-attribute.model";
import { AwsModuleKeyname } from "../aws.module.keyname";
/**
 * Mapper to map the Sns event into a Pristine event.
 * It is tagged as an ServiceDefinitionTagEnum.EventMapper so that it can be injected with all the other event mappers.
 * It is module scoped so that it gets injected only if the AWS module is imported.
 */
let SnsEventMapper = class SnsEventMapper {
    /**
     * Finds the enum value corresponding to the event name.
     * @param eventName The event name of the SNS event.
     * @private
     */
    findEnum(eventName) {
        const keys = Object.keys(SnsEventType).filter(key => isNaN(Number(key)));
        for (const key of keys) {
            if (SnsEventType[key] === eventName) {
                return SnsEventType[key];
            }
        }
        return SnsEventType.UnknownSnsEvent;
    }
    /**
     * Parses the SNS event into a Pristine event.
     * @param rawEvent The raw SNS event
     * @param executionContext The ExecutionContext from where the event is triggered. It can easily be used to determine
     * where the current service is hosted.
     */
    map(rawEvent, executionContext) {
        const parsedEvents = [];
        for (const record of rawEvent.Records) {
            const event = new Event(this.findEnum(record.Sns.Type), new SnsEventPayload());
            event.payload.eventSource = record.EventSource;
            event.payload.eventSubscriptionArn = record.EventSubscriptionArn;
            event.payload.eventVersion = record.EventVersion;
            event.payload.sns = new SnsModel();
            event.payload.sns.signatureVersion = record.Sns.SignatureVersion;
            event.payload.sns.eventTime = new Date(record.Sns.Timestamp);
            event.payload.sns.signature = record.Sns.Signature;
            event.payload.sns.signingCertUrl = record.Sns.SigningCertUrl;
            event.payload.sns.messageId = record.Sns.MessageId;
            event.payload.sns.message = record.Sns.Message;
            event.payload.sns.type = record.Sns.Type;
            event.payload.sns.unsubscribeUrl = record.Sns.UnsubscribeUrl;
            event.payload.sns.topicArn = record.Sns.TopicArn;
            event.payload.sns.subject = record.Sns.Subject;
            if (record.Sns.hasOwnProperty("MessageAttributes")) {
                event.payload.sns.messageAttributes = [];
                for (const key in record.Sns.MessageAttributes) {
                    if (record.Sns.MessageAttributes.hasOwnProperty(key)) {
                        const attribute = new SnsMessageAttributeModel();
                        attribute.key = key;
                        attribute.type = record.Sns.MessageAttributes[key].Type;
                        attribute.value = record.Sns.MessageAttributes[key].Value;
                        event.payload.sns.messageAttributes.push(attribute);
                    }
                }
            }
            parsedEvents.push(event);
        }
        return {
            executionOrder: 'parallel',
            events: parsedEvents,
        };
    }
    /**
     * Determines if the parser supports the event.
     * @param event The event to verify if the parser supports.
     * @param executionContext The ExecutionContext from where the event is triggered. It can easily be used to determine
     * where the current service is hosted.
     */
    supportsMapping(event, executionContext) {
        return event.hasOwnProperty("Records") &&
            Array.isArray(event.Records) &&
            event.Records[0].hasOwnProperty("EventSource") &&
            event.Records[0].EventSource === "aws:sns" &&
            event.Records[0].hasOwnProperty("Sns");
    }
    /**
     * Determines if the parser supports mapping the Pristine event to an event response.
     * For now it does not support a response.
     * @param eventResponse The event response.
     * @param response The response.
     * @param executionContext The execution context of the event.
     */
    supportsReverseMapping(eventResponse, response, executionContext) {
        // todo: implement
        return false;
    }
    /**
     * Reverse maps the Pristine event into an event response.
     * For now it does not mapping a Pristine event to an Sns event response.
     * @param eventResponse The event response.
     * @param response The response.
     * @param executionContext The execution context of the event.
     */
    reverseMap(eventResponse, response, executionContext) {
        // todo: implement
    }
};
SnsEventMapper = __decorate([
    tag(ServiceDefinitionTagEnum.EventMapper),
    moduleScoped(AwsModuleKeyname),
    injectable()
], SnsEventMapper);
export { SnsEventMapper };
//# sourceMappingURL=sns-event.mapper.js.map