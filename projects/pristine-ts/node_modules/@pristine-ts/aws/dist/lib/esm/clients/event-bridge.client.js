var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { inject, injectable } from "tsyringe";
import { EventBridgeClient as AwsEventBridgeClient, PutEventsCommand } from "@aws-sdk/client-eventbridge";
import { EventBridgeSendMessageError } from "../errors/event-bridge-send-message.error";
import { moduleScoped, tag } from "@pristine-ts/common";
import { AwsModuleKeyname } from "../aws.module.keyname";
/**
 * The client to use to interact with AWS Event Bridge. It is a wrapper around the AwsEventBridgeClient of @aws-sdk/client-eventbridge.
 * It is tagged so it can be injected using EventBridgeClientInterface.
 */
let EventBridgeClient = class EventBridgeClient {
    /**
     * The client to use to interact with AWS Event Bridge. It is a wrapper around the AwsEventBridgeClient of @aws-sdk/client-eventbridge.
     * @param logHandler The log handler used to output logs.
     * @param region The aws region for which the client will be used.
     */
    constructor(logHandler, region) {
        this.logHandler = logHandler;
        this.region = region;
    }
    /**
     * Returns the instantiated AwsEventBridgeClient from the @aws-sdk/client-eventbridge library.
     * @param endpoint The endpoint for which the Event Bridge client is created.
     */
    getClient(endpoint) {
        return new AwsEventBridgeClient({
            apiVersion: "2015-10-17",
            region: this.region,
            endpoint: endpoint !== null && endpoint !== void 0 ? endpoint : undefined,
        });
    }
    /**
     * Sends an event to event bridge.
     * @param eventBridgeMessages The messages to send to event bridge.
     * @param eventBusName The event bus name where to send the messages.
     * @param endpoint The endpoint for event bridge.
     */
    send(eventBridgeMessages, eventBusName, endpoint) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const client = this.getClient(endpoint);
                const putEventsCommand = new PutEventsCommand({
                    Entries: []
                });
                this.logHandler.debug("Sending a message to the EventBridge", {
                    eventBridgeMessages,
                    eventBusName,
                    endpoint,
                }, AwsModuleKeyname);
                if (Array.isArray(eventBridgeMessages)) {
                    putEventsCommand.input.Entries = eventBridgeMessages.map(eventBridgeMessage => {
                        return {
                            EventBusName: eventBusName,
                            Source: eventBridgeMessage.source,
                            DetailType: eventBridgeMessage.detailType,
                            Detail: eventBridgeMessage.detail,
                            Resources: eventBridgeMessage.resources,
                        };
                    });
                }
                else {
                    putEventsCommand.input.Entries = [{
                            EventBusName: eventBusName,
                            Source: eventBridgeMessages.source,
                            DetailType: eventBridgeMessages.detailType,
                            Detail: eventBridgeMessages.detail,
                            Resources: eventBridgeMessages.resources,
                        }];
                }
                const response = yield client.send(putEventsCommand);
                this.logHandler.debug("Message successfully sent to the EventBridge", {
                    eventBridgeMessages,
                    eventBusName,
                    endpoint,
                    response,
                }, AwsModuleKeyname);
            }
            catch (error) {
                this.logHandler.error("There was an error sending the message to the Event Bus", {
                    error,
                    eventBridgeMessages,
                    eventBusName,
                    endpoint,
                }, AwsModuleKeyname);
                throw new EventBridgeSendMessageError(error);
            }
        });
    }
};
EventBridgeClient = __decorate([
    tag("EventBridgeClientInterface"),
    moduleScoped(AwsModuleKeyname),
    injectable(),
    __param(0, inject("LogHandlerInterface")),
    __param(1, inject("%pristine.aws.region%")),
    __metadata("design:paramtypes", [Object, String])
], EventBridgeClient);
export { EventBridgeClient };
//# sourceMappingURL=event-bridge.client.js.map