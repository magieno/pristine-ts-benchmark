"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamodbEventMapper = void 0;
const core_1 = require("@pristine-ts/core");
const common_1 = require("@pristine-ts/common");
const tsyringe_1 = require("tsyringe");
const dynamodb_event_type_enum_1 = require("../enums/dynamodb-event-type.enum");
const dynamodb_event_payload_1 = require("../event-payloads/dynamodb.event-payload");
const dynamodb_model_1 = require("../models/dynamodb.model");
const aws_module_keyname_1 = require("../aws.module.keyname");
/**
 * Mapper to map the DynamoDb event into a Pristine event.
 * It is tagged as an ServiceDefinitionTagEnum.EventMapper so that it can be injected with all the other event mappers.
 * It is module scoped so that it gets injected only if the AWS module is imported.
 */
let DynamodbEventMapper = class DynamodbEventMapper {
    /**
     * Finds the enum value corresponding to the event name.
     * @param eventName The event name of the DynamoDb event.
     * @private
     */
    findEnum(eventName) {
        const keys = Object.keys(dynamodb_event_type_enum_1.DynamodbEventType).filter(key => isNaN(Number(key)));
        for (const key of keys) {
            if (dynamodb_event_type_enum_1.DynamodbEventType[key] === eventName) {
                return dynamodb_event_type_enum_1.DynamodbEventType[key];
            }
        }
        return dynamodb_event_type_enum_1.DynamodbEventType.UnknownDynamoDbEvent;
    }
    /**
     * Parses the keys from the DynamoDb event
     * @param object The keys to be parsed
     * @private
     */
    parseKeys(object) {
        const parsedKeys = [];
        for (const key in object) {
            if (object.hasOwnProperty(key)) {
                const keyType = Object.keys(object[key])[0];
                parsedKeys.push({
                    keyName: key,
                    keyType,
                    keyValue: object[key][keyType],
                });
            }
        }
        return parsedKeys;
    }
    /**
     * Parses the DynamoDb event into a Pristine event.
     * @param rawEvent The raw DynamoDb event
     * @param executionContext The ExecutionContext from where the event is triggered.
     */
    map(rawEvent, executionContext) {
        const parsedEvents = [];
        for (const record of rawEvent.Records) {
            const event = new core_1.Event(this.findEnum(record.eventName), new dynamodb_event_payload_1.DynamodbEventPayload());
            event.payload.eventVersion = record.eventVersion;
            event.payload.eventSource = record.eventSource;
            if (record.dynamodb.ApproximateCreationDateTime) {
                event.payload.eventTime = new Date(record.dynamodb.ApproximateCreationDateTime);
            }
            event.payload.awsRegion = record.awsRegion;
            event.payload.eventName = record.eventName;
            event.payload.eventId = record.eventID;
            event.payload.eventSourceArn = record.eventSourceARN;
            event.payload.dynamodb = new dynamodb_model_1.DynamodbModel();
            event.payload.dynamodb.sequenceNumber = record.dynamodb.SequenceNumber;
            event.payload.dynamodb.sizeBytes = record.dynamodb.SizeBytes;
            event.payload.dynamodb.streamViewType = record.dynamodb.StreamViewType;
            event.payload.dynamodb.keys = record.dynamodb.Keys;
            event.payload.dynamodb.parsedKeys = this.parseKeys(record.dynamodb.Keys);
            if (record.dynamodb.NewImage) {
                event.payload.dynamodb.newImage = record.dynamodb.NewImage;
                event.payload.dynamodb.parsedNewImage = this.parseKeys(record.dynamodb.NewImage);
            }
            if (record.dynamodb.OldImage) {
                event.payload.dynamodb.oldImage = record.dynamodb.OldImage;
                event.payload.dynamodb.parsedOldImage = this.parseKeys(record.dynamodb.OldImage);
            }
            event.payload.dynamodb.tableName = record.eventSourceARN.split("/")[1];
            parsedEvents.push(event);
        }
        return {
            executionOrder: 'parallel',
            events: parsedEvents,
        };
    }
    /**
     * Determines if the parser supports mapping the raw event to a Pristine event.
     * This mapper only supports raw Dynamodb events.
     * @param event The event to verify if the parser supports.
     * @param executionContext The ExecutionContext from where the event is triggered. It can easily be used to determine
     * where the current service is hosted.
     */
    supportsMapping(event, executionContext) {
        return event.hasOwnProperty("Records") &&
            Array.isArray(event.Records) &&
            event.Records[0].hasOwnProperty("eventSource") &&
            event.Records[0].eventSource === "aws:dynamodb" &&
            event.Records[0].hasOwnProperty("dynamodb");
    }
    /**
     * Determines if the parser supports mapping the Pristine event to an event response.
     * For now it does not support a response.
     * @param eventResponse The event response.
     * @param response The response.
     * @param executionContext The execution context of the event.
     */
    supportsReverseMapping(eventResponse, response, executionContext) {
        // todo: implement
        return false;
    }
    /**
     * Reverse maps the Pristine event into an event response.
     * For now it does not mapping a Pristine event to a Dynamodb response.
     * @param eventResponse The event response.
     * @param response The response.
     * @param executionContext The execution context of the event.
     */
    reverseMap(eventResponse, response, executionContext) {
        // todo: implement
    }
};
DynamodbEventMapper = __decorate([
    (0, common_1.tag)(common_1.ServiceDefinitionTagEnum.EventMapper),
    (0, common_1.moduleScoped)(aws_module_keyname_1.AwsModuleKeyname),
    (0, tsyringe_1.injectable)()
], DynamodbEventMapper);
exports.DynamodbEventMapper = DynamodbEventMapper;
//# sourceMappingURL=dynamodb-event.mapper.js.map