import { DynamoDB } from "@aws-sdk/client-dynamodb";
import { DataMapper, StringToAnyObjectMap } from "@awslabs-community-fork/dynamodb-data-mapper";
import { ZeroArgumentsConstructor } from "@awslabs-community-fork/dynamodb-data-marshaller";
import { LogHandlerInterface } from "@pristine-ts/logging";
import { DynamodbClientInterface } from "../interfaces/dynamodb-client.interface";
import { ListOptions } from "../options/list.options";
import { FindBySecondaryIndexOptions } from "../options/find-by-secondary-index.options";
import { ListResult } from "../results/list.result";
/**
 * The client to use to interact with AWS DynamoDb. It is a wrapper around the client of @aws-sdk/client-dynamodb.
 * It is tagged so it can be injected using DynamodbClientInterface.
 */
export declare class DynamodbClient implements DynamodbClientInterface {
    private readonly logHandler;
    private readonly region;
    /**
     * The instantiated client from the @aws-sdk/client-dynamodb library.
     * @private
     */
    private client;
    /**
     * The instantiated mapper client from the @awslabs-community-fork/dynamodb-data-mapper library.
     * @private
     */
    private mapperClient;
    /**
     * The client to use to interact with DynamoDb. It is a wrapper around the client of @aws-sdk/client-dynamodb.
     * @param logHandler The log handler used to output logs.
     * @param region The aws region for which the client will be used.
     */
    constructor(logHandler: LogHandlerInterface, region: string);
    /**
     * Returns the DynamoDB client from the @aws-sdk/client-dynamodb library
     */
    getClient(): Promise<DynamoDB>;
    /**
     * Returns the mapper client from the @awslabs-community-fork/dynamodb-data-mapper library
     */
    getMapperClient(): Promise<DataMapper>;
    /**
     * Gets the table name from a class prototype.
     * @param classTypePrototype The class prototype containing a table name in the DynamoDbTable symbol
     * @private
     */
    private getTableName;
    /**
     * Gets an object from Dynamodb. Returns null if the item was not found.
     * @param classType The class type of the object to be retrieved.
     * @param primaryKeyAndValue An object containing the primary key and the value of the object to get. (ie: {id: value})
     */
    get<T extends StringToAnyObjectMap>(classType: ZeroArgumentsConstructor<T>, primaryKeyAndValue: {
        [key: string]: string;
    }): Promise<T | null>;
    /**
     * Lists all the objects of a type (table).
     * @param options The options to use to list.
     */
    list<T extends StringToAnyObjectMap>(options: ListOptions<T>): Promise<ListResult<T>>;
    /**
     * Creates an entry in DynamoDb if this id does not already exist.
     * @param item The item to create.
     */
    create<T extends StringToAnyObjectMap>(item: T): Promise<T>;
    /**
     * Updates an item based on the hashkey.
     * @param item The item to update.
     */
    update<T extends StringToAnyObjectMap>(item: T): Promise<T>;
    /**
     * Puts (create or replace) item.
     * @param item The item.
     */
    put<T extends StringToAnyObjectMap>(item: T): Promise<T>;
    /**
     * Deletes an item.
     * @param classType The class type of the item to delete.
     * @param primaryKeyAndValue An object containing the primary key and the value of this key of the object to delete. (ie: {id: value})
     */
    delete<T extends StringToAnyObjectMap>(classType: ZeroArgumentsConstructor<T>, primaryKeyAndValue: {
        [key: string]: string;
    }): Promise<void>;
    /**
     * Lists the item by secondary index.
     * @param options The options to use.
     */
    findBySecondaryIndex<T extends StringToAnyObjectMap>(options: FindBySecondaryIndexOptions<T>): Promise<ListResult<T>>;
    /**
     * Creates the filter conditions for DynamoDb.
     * @param filterKeysAndValues A map containing the filters keys and values to apply when listing by secondary index. Every key in the map represents an AND and the values represent ORs.  (ie: {filterKey1: filterValue, filterKey2: [value1, value1]} means you need filterKey1 to equal filterValue AND filterKey2 to equal value1 OR value2)
     * @private
     */
    private createFilterConditions;
    /**
     * Creates the final expression containing all the conditions for DyanmoDb.
     * @param filterKeysAndValues A map containing the filters keys and values to apply when listing by secondary index. Every key in the map represents an AND and the values represent ORs.  (ie: {filterKey1: filterValue, filterKey2: [value1, value1]} means you need filterKey1 to equal filterValue AND filterKey2 to equal value1 OR value2)
     * @param expiresAtFilter A filter to get only the ones that the expiration is later then the value. Can either be a Date or a number representing the timestamp in seconds. (ie: {expiresAt: new Date()}).
     * @private
     */
    private createFilterExpression;
    /**
     * Creates the dynamodb expression for the expires at filter
     * @param expiresAtFilter A filter to get only the ones that the expiration is later then the value. Can either be a Date or a number representing the timestamp in seconds. (ie: {expiresAt: new Date()}).
     * @private
     */
    private createExpiresAtFilter;
    /**
     * Converts an error from Dynamodb into a Pristine error type.
     * @param error The error to be converted.
     * @param tableName The table name on which the error happened
     * @param primaryKey The primary key of the item for which the error happened.
     * @private
     */
    private convertError;
    /**
     * Creates an item based on the class type and the primary key and value.
     * @param classType The class type of the item.
     * @param primaryKeyAndValue An object representing the primary key and its value (ie: {id: value})
     * @private
     */
    private createItemOfClassWithPrimaryKey;
}
