import { LogHandlerInterface } from "@pristine-ts/logging";
import { EventBridgeClient as AwsEventBridgeClient } from "@aws-sdk/client-eventbridge";
import { EventBridgeMessageModel } from "../models/event-bridge-message.model";
import { EventBridgeClientInterface } from "../interfaces/event-bridge-client.interface";
/**
 * The client to use to interact with AWS Event Bridge. It is a wrapper around the AwsEventBridgeClient of @aws-sdk/client-eventbridge.
 * It is tagged so it can be injected using EventBridgeClientInterface.
 */
export declare class EventBridgeClient implements EventBridgeClientInterface {
    private readonly logHandler;
    private readonly region;
    /**
     * The client to use to interact with AWS Event Bridge. It is a wrapper around the AwsEventBridgeClient of @aws-sdk/client-eventbridge.
     * @param logHandler The log handler used to output logs.
     * @param region The aws region for which the client will be used.
     */
    constructor(logHandler: LogHandlerInterface, region: string);
    /**
     * Returns the instantiated AwsEventBridgeClient from the @aws-sdk/client-eventbridge library.
     * @param endpoint The endpoint for which the Event Bridge client is created.
     */
    getClient(endpoint?: string): AwsEventBridgeClient;
    /**
     * Sends an event to event bridge.
     * @param eventBridgeMessages The messages to send to event bridge.
     * @param eventBusName The event bus name where to send the messages.
     * @param endpoint The endpoint for event bridge.
     */
    send(eventBridgeMessages: EventBridgeMessageModel | EventBridgeMessageModel[], eventBusName: string, endpoint?: string): Promise<void>;
}
