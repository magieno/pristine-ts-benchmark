import { LogHandlerInterface } from "@pristine-ts/logging";
import { SQSClient } from "@aws-sdk/client-sqs";
import { SqsMessageSentConfirmationModel } from "../models/sqs-message-sent-confirmation.model";
import { SqsClientInterface } from "../interfaces/sqs-client.interface";
/**
 * The client to use to interact with AWS SQS. It is a wrapper around the SQSClient of @aws-sdk/client-sqs.
 * It is tagged so it can be injected using SqsClientInterface.
 */
export declare class SqsClient implements SqsClientInterface {
    private readonly logHandler;
    private readonly region;
    /**
     * The client to use to interact with AWS SQS. It is a wrapper around the SQSClient of @aws-sdk/client-sqs.
     * @param logHandler The log handler used to output logs.
     * @param region The aws region for which the client will be used.
     */
    constructor(logHandler: LogHandlerInterface, region: string);
    /**
     * Returns the instantiated SQSClient from the @aws-sdk/client-sqs library.
     * @param endpoint The endpoint for which the SQS client is created.
     */
    getClient(endpoint?: string): SQSClient;
    /**
     * Sends a message to the specified Queue URL.
     * @param queueUrl The queue url where to send the message.
     * @param body The body of the message to send in the queue.
     * @param messageGroupId The message group id for FIFO queues.
     * @param delaySeconds The length of time, in seconds, for which to delay a specific message.
     * @param endpoint The endpoint for SQS.
     */
    send(queueUrl: string, body: string, messageGroupId?: string, delaySeconds?: number, endpoint?: string): Promise<SqsMessageSentConfirmationModel>;
}
