import { EventMapperInterface, EventResponse, ExecutionContextInterface, EventsExecutionOptionsInterface } from "@pristine-ts/core";
import { SnsEventPayload } from "../event-payloads/sns.event-payload";
/**
 * Mapper to map the Sns event into a Pristine event.
 * It is tagged as an ServiceDefinitionTagEnum.EventMapper so that it can be injected with all the other event mappers.
 * It is module scoped so that it gets injected only if the AWS module is imported.
 */
export declare class SnsEventMapper implements EventMapperInterface<SnsEventPayload, void> {
    /**
     * Finds the enum value corresponding to the event name.
     * @param eventName The event name of the SNS event.
     * @private
     */
    private findEnum;
    /**
     * Parses the SNS event into a Pristine event.
     * @param rawEvent The raw SNS event
     * @param executionContext The ExecutionContext from where the event is triggered. It can easily be used to determine
     * where the current service is hosted.
     */
    map(rawEvent: any, executionContext: ExecutionContextInterface<any>): EventsExecutionOptionsInterface<SnsEventPayload>;
    /**
     * Determines if the parser supports the event.
     * @param event The event to verify if the parser supports.
     * @param executionContext The ExecutionContext from where the event is triggered. It can easily be used to determine
     * where the current service is hosted.
     */
    supportsMapping(event: any, executionContext: ExecutionContextInterface<any>): boolean;
    /**
     * Determines if the parser supports mapping the Pristine event to an event response.
     * For now it does not support a response.
     * @param eventResponse The event response.
     * @param response The response.
     * @param executionContext The execution context of the event.
     */
    supportsReverseMapping(eventResponse: EventResponse<SnsEventPayload, void>, response: any, executionContext: ExecutionContextInterface<any>): boolean;
    /**
     * Reverse maps the Pristine event into an event response.
     * For now it does not mapping a Pristine event to an Sns event response.
     * @param eventResponse The event response.
     * @param response The response.
     * @param executionContext The execution context of the event.
     */
    reverseMap(eventResponse: EventResponse<SnsEventPayload, void>, response: any, executionContext: ExecutionContextInterface<any>): void;
}
