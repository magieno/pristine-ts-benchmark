"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberResolver = void 0;
const configuration_resolver_error_1 = require("../errors/configuration-resolver.error");
/**
 * This class takes either another resolver or a scalar (boolean, number or string) and returns a number value.
 */
class NumberResolver {
    constructor(valueOrResolver) {
        this.valueOrResolver = valueOrResolver;
    }
    /**
     * This method takes a string and transforms it into a number. This is useful in configurations when the system, for example environment variables, only
     * support string but the configuration expects a number.
     * @param value
     * @private
     */
    resolveString(value) {
        if (isNaN(+value) === false) {
            return +value;
        }
        throw new configuration_resolver_error_1.ConfigurationResolverError("Cannot convert the string to a number.", value);
    }
    /**
     * This method takes a boolean and transforms it into a number. This is useful when you receive a boolean but expect
     * a number in the end.
     *
     * @param value
     * @private
     */
    resolveBoolean(value) {
        if (value === false) {
            return 0;
        }
        if (value === true) {
            return 1;
        }
        throw new configuration_resolver_error_1.ConfigurationResolverError("Cannot convert the number to a boolean.", value);
    }
    /**
     * This method checks the type of the argument and calls the proper individual method.
     *
     * @param value
     * @private
     */
    resolveValueOrResolver(value) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof value === "number") {
                return value;
            }
            if (typeof value === "string") {
                return this.resolveString(value);
            }
            if (typeof value === "boolean") {
                return this.resolveBoolean(value);
            }
            if (typeof value === "object" && typeof value.resolve === "function") {
                return this.resolveValueOrResolver(yield value.resolve());
            }
            throw new configuration_resolver_error_1.ConfigurationResolverError("Cannot resolve the value passed. It isn't of type boolean, string, number or ResolverInterface.", value);
        });
    }
    /**
     * This method resolve the value whether it's a scalar or a Resolver.
     */
    resolve() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.resolveValueOrResolver(this.valueOrResolver);
        });
    }
}
exports.NumberResolver = NumberResolver;
//# sourceMappingURL=number.resolver.js.map