var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ConfigurationResolverError } from "../errors/configuration-resolver.error";
/**
 * This class takes either another resolver or a scalar (number or string) and returns an enum value.
 */
export class EnumResolver {
    /**
     * The constructor for the enum resolver.
     * @param valueOrResolver The value or resolver.
     * @param enumClass The enum class to which the resolved value needs to be mapped.
     */
    constructor(valueOrResolver, enumClass) {
        this.valueOrResolver = valueOrResolver;
        this.enumClass = enumClass;
    }
    /**
     * This method takes a string and transforms it into an enum value. This is useful in configurations when the system, for example environment variables, only
     * support string but the configuration expects an enum value.
     * @param value
     * @param enumClass
     * @private
     */
    resolveString(value, enumClass) {
        const normalizedValue = value.toLowerCase();
        const keys = Object.keys(enumClass).filter(key => isNaN(Number(key)));
        for (const key of keys) {
            // Verifies if the value is either equal to a key or a value of the enum.
            if (key.toLowerCase() === normalizedValue || enumClass[key] === value) {
                return enumClass[key];
            }
        }
        throw new ConfigurationResolverError("Cannot convert the string to a key of the enum.", value);
    }
    /**
     * This method takes a number and transforms it into a boolean. This is useful when you receive a number but expect
     * an enum value in the end.
     *
     * @param value
     * @param enumClass
     * @private
     */
    resolveNumber(value, enumClass) {
        const keys = Object.keys(enumClass);
        for (const key of keys) {
            if (enumClass[key] === value) {
                return enumClass[key];
            }
        }
        throw new ConfigurationResolverError("Cannot convert the number to a value of the enum.", value);
    }
    /**
     * This method checks the type of the argument and calls the proper individual method.
     *
     * @param value
     * @param enumClass
     * @private
     */
    resolveValueOrResolver(value, enumClass) {
        return __awaiter(this, void 0, void 0, function* () {
            value = !isNaN(+value) && typeof value !== "object" ? +value : value;
            if (typeof value === "string") {
                return this.resolveString(value, enumClass);
            }
            if (typeof value === "number") {
                return this.resolveNumber(value, enumClass);
            }
            if (typeof value === "object" && typeof value.resolve === "function") {
                return this.resolveValueOrResolver(yield value.resolve(), enumClass);
            }
            throw new ConfigurationResolverError("Cannot resolve the value passed. It isn't of type string, number or ResolverInterface.", value);
        });
    }
    /**
     * This method resolve the value whether it's a scalar or a Resolver.
     */
    resolve() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.resolveValueOrResolver(this.valueOrResolver, this.enumClass);
        });
    }
}
//# sourceMappingURL=enum.resolver.js.map