var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ConfigurationValidationError } from "../errors/configuration-validation.error";
import { injectable } from "tsyringe";
let ConfigurationParser = class ConfigurationParser {
    /**
     * This method resolves the value for the configuration value.
     * The configuration value can either be a basic type, that we return right away, a promise, a DynamicConfigurationResolverInterface or a ResolverInterface that we have to resolve.
     * @param moduleConfigurationValue
     * @param container
     */
    resolve(moduleConfigurationValue, container) {
        return __awaiter(this, void 0, void 0, function* () {
            // No need to check if the value is a promise. https://stackoverflow.com/a/27760489/684101
            const resolvedValue = yield Promise.resolve(moduleConfigurationValue);
            // If the value is already a base type or a promise that resolves to a base type we return the value right away.
            if (typeof resolvedValue === "boolean" || typeof resolvedValue === "number" || typeof resolvedValue === "string") {
                return resolvedValue;
            }
            // If the value is an object it's either a DynamicConfigurationResolverInterface or a ResolverInterface we need to resolve the proper value.
            if (typeof resolvedValue === "object") {
                const dynamicConfigurationResolver = resolvedValue;
                //  If the object is DynamicConfigurationResolverInterface
                if (dynamicConfigurationResolver.dynamicResolve !== undefined && typeof dynamicConfigurationResolver.dynamicResolve === "function") {
                    let instantiatedClass;
                    // Resolve the instantiated class from the dependency container based on the injection token provided.
                    if (dynamicConfigurationResolver.injectionToken) {
                        instantiatedClass = container.resolve(dynamicConfigurationResolver.injectionToken);
                    }
                    // Execute the dynamicResolve function of the DynamicConfigurationResolverInterface with the instantiatedClass.
                    return Promise.resolve(dynamicConfigurationResolver.dynamicResolve(instantiatedClass));
                }
                // If the object is a ResolverInterface, we resolve the resolver and return the value.
                else if (typeof resolvedValue.resolve === "function") {
                    return Promise.resolve(resolvedValue.resolve());
                }
            }
            throw new ConfigurationValidationError(["The configuration value passed contains an unsupported type. Unsupported type: '" + typeof resolvedValue + "'"]);
        });
    }
};
ConfigurationParser = __decorate([
    injectable()
], ConfigurationParser);
export { ConfigurationParser };
//# sourceMappingURL=configuration.parser.js.map