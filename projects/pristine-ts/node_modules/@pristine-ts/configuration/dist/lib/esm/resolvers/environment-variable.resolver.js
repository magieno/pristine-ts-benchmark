var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ConfigurationResolverError } from "../errors/configuration-resolver.error";
import { ConfigurationUtils } from "../utils/configuration.utils";
/**
 * This class takes the name of the environment variable and returns the value.
 */
export class EnvironmentVariableResolver {
    constructor(environmentVariableName) {
        this.environmentVariableName = environmentVariableName;
    }
    /**
     * Resolves the value of the environment variable.
     */
    resolve() {
        return __awaiter(this, void 0, void 0, function* () {
            const environmentVariables = ConfigurationUtils.getEnvironmentVariablesMemoized();
            if (environmentVariables[this.environmentVariableName] === undefined) {
                throw new ConfigurationResolverError("Cannot find the environment variable.", this.environmentVariableName);
            }
            return Promise.resolve(environmentVariables[this.environmentVariableName]);
        });
    }
}
//# sourceMappingURL=environment-variable.resolver.js.map