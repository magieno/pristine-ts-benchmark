import { ResolverInterface } from "@pristine-ts/common";
/**
 * This class takes either another resolver or a scalar (boolean, number or string) and returns a boolean value.
 */
export declare class BooleanResolver implements ResolverInterface<boolean> {
    private readonly valueOrResolver;
    constructor(valueOrResolver: boolean | string | number | ResolverInterface<string> | ResolverInterface<number>);
    /**
     * This method takes a string and transforms it into a boolean. This is useful in configurations when the system, for example environment variables, only
     * support string but the configuration expects a boolean.
     * @param value
     * @private
     */
    private resolveString;
    /**
     * This method takes a number and transforms it into a boolean. This is useful when you receive a number but expect
     * a boolean in the end.
     *
     * @param value
     * @private
     */
    private resolveNumber;
    /**
     * This method checks the type of the argument and calls the proper individual method.
     *
     * @param value
     * @private
     */
    private resolveValueOrResolver;
    /**
     * This method resolve the value whether it's a scalar or a Resolver.
     */
    resolve(): Promise<boolean>;
}
