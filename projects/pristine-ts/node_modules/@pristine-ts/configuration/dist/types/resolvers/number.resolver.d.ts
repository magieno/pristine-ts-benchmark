import { ResolverInterface } from "@pristine-ts/common";
/**
 * This class takes either another resolver or a scalar (boolean, number or string) and returns a number value.
 */
export declare class NumberResolver implements ResolverInterface<number> {
    private readonly valueOrResolver;
    constructor(valueOrResolver: boolean | string | number | ResolverInterface<string> | ResolverInterface<number> | ResolverInterface<boolean>);
    /**
     * This method takes a string and transforms it into a number. This is useful in configurations when the system, for example environment variables, only
     * support string but the configuration expects a number.
     * @param value
     * @private
     */
    private resolveString;
    /**
     * This method takes a boolean and transforms it into a number. This is useful when you receive a boolean but expect
     * a number in the end.
     *
     * @param value
     * @private
     */
    private resolveBoolean;
    /**
     * This method checks the type of the argument and calls the proper individual method.
     *
     * @param value
     * @private
     */
    private resolveValueOrResolver;
    /**
     * This method resolve the value whether it's a scalar or a Resolver.
     */
    resolve(): Promise<number>;
}
