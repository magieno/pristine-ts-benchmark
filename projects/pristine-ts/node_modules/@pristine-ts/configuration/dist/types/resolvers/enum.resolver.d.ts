import { ResolverInterface } from "@pristine-ts/common";
/**
 * This class takes either another resolver or a scalar (number or string) and returns an enum value.
 */
export declare class EnumResolver<E> implements ResolverInterface<E> {
    private readonly valueOrResolver;
    private readonly enumClass;
    /**
     * The constructor for the enum resolver.
     * @param valueOrResolver The value or resolver.
     * @param enumClass The enum class to which the resolved value needs to be mapped.
     */
    constructor(valueOrResolver: string | number | ResolverInterface<string> | ResolverInterface<number>, enumClass: any);
    /**
     * This method takes a string and transforms it into an enum value. This is useful in configurations when the system, for example environment variables, only
     * support string but the configuration expects an enum value.
     * @param value
     * @param enumClass
     * @private
     */
    private resolveString;
    /**
     * This method takes a number and transforms it into a boolean. This is useful when you receive a number but expect
     * an enum value in the end.
     *
     * @param value
     * @param enumClass
     * @private
     */
    private resolveNumber;
    /**
     * This method checks the type of the argument and calls the proper individual method.
     *
     * @param value
     * @param enumClass
     * @private
     */
    private resolveValueOrResolver;
    /**
     * This method resolve the value whether it's a scalar or a Resolver.
     */
    resolve(): Promise<E>;
}
