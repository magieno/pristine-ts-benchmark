import { DependencyContainer } from "tsyringe";
import { ModuleConfigurationValue } from "../types/module-configuration.value";
import { ConfigurationParser } from "../parsers/configuration.parser";
import { ConfigurationDefinition } from "@pristine-ts/common";
export declare class ConfigurationManager {
    private readonly configurationParser;
    configurationDefinitions: {
        [key: string]: ConfigurationDefinition;
    };
    constructor(configurationParser: ConfigurationParser);
    /**
     * This method registers the configuration definition that a module has defined. This method will be called for each
     * configuration definition defined in each module.
     *
     * @param configurationDefinition
     */
    register(configurationDefinition: ConfigurationDefinition): void;
    /**
     * This method loads the configuration values passed dynamically when instantiating the Kernel. This method
     * will verify that a corresponding configurationDefinition exists and if it does, it will resolve the value.
     *
     * This method will also check to make sure that all the expected values are being passed. For example, if a module expects
     * a configuration value to be passed, this method will throw if none are passed.
     *
     * @param moduleConfigurationValues
     * @param container
     */
    load(moduleConfigurationValues: {
        [key: string]: ModuleConfigurationValue;
    }, container: DependencyContainer): Promise<void>;
    /**
     * This method simply registers the configuration parameter with the resolved value in the container.
     *
     * @param configurationKey
     * @param value
     * @param container
     */
    registerConfigurationValue(configurationKey: string, value: boolean | number | string, container: DependencyContainer): void;
}
