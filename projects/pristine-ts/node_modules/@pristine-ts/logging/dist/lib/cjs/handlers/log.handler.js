"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogHandler = void 0;
require("reflect-metadata");
const tsyringe_1 = require("tsyringe");
const severity_enum_1 = require("../enums/severity.enum");
const log_model_1 = require("../models/log.model");
const common_1 = require("@pristine-ts/common");
const utils_1 = require("../utils/utils");
/**
 * The LogHandler to use when we want to output some logs.
 * This handler makes sure that only the right level of logs are outputted, stacks logs, and logs with different loggers.
 * It is registered with the tag LogHandlerInterface so that it can be injected as a LogHandlerInterface to facilitate mocking.
 */
let LogHandler = class LogHandler {
    /**
     * The LogHandler to use when we want to output some logs.
     * @param loggers The loggers to use to output the logs. All services with the tag ServiceDefinitionTagEnum.Logger will be automatically injected here.
     * @param logSeverityLevelConfiguration The severity from which to start logging the logs.
     * @param activateDiagnostics Whether or not the outputted logs should contain the diagnostic part. This is an intensive process and can dramatically reduce the performance of the code.
     * @param kernelInstantiationId The id of instantiation of the kernel.
     * @param tracingContext The context of the tracing.
     */
    constructor(loggers, logSeverityLevelConfiguration, activateDiagnostics, kernelInstantiationId, tracingContext) {
        this.loggers = loggers;
        this.logSeverityLevelConfiguration = logSeverityLevelConfiguration;
        this.activateDiagnostics = activateDiagnostics;
        this.kernelInstantiationId = kernelInstantiationId;
        this.tracingContext = tracingContext;
    }
    /**
     * This method terminates the loggers.
     */
    terminate() {
        this.loggers.forEach((logger) => {
            logger.terminate();
        });
    }
    /**
     * Logs the message if the severity is set to critical or above.
     * This function is wrapper function for the log method with the proper severity to make it cleaner when using it in the code.
     * @param message The message to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    critical(message, extra, module = "application") {
        return this.log(message, severity_enum_1.SeverityEnum.Critical, extra, module);
    }
    /**
     * Logs the message if the severity is set to error or above.
     * This function is wrapper function for the log method with the proper severity to make it cleaner when using it in the code.
     * @param message The message to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    error(message, extra, module = "application") {
        return this.log(message, severity_enum_1.SeverityEnum.Error, extra, module);
    }
    /**
     * Logs the message if the severity is set to warning or above.
     * This function is wrapper function for the log method with the proper severity to make it cleaner when using it in the code.
     * @param message The message to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    warning(message, extra, module = "application") {
        return this.log(message, severity_enum_1.SeverityEnum.Warning, extra, module);
    }
    /**
     * Logs the message if the severity is set to info or above.
     * This function is wrapper function for the log method with the proper severity to make it cleaner when using it in the code.
     * @param message The message to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    info(message, extra, module = "application") {
        return this.log(message, severity_enum_1.SeverityEnum.Info, extra, module);
    }
    /**
     * Logs the message if the severity is set to debug or above.
     * This function is wrapper function for the log method with the proper severity to make it cleaner when using it in the code.
     * @param message The message to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    debug(message, extra, module = "application") {
        return this.log(message, severity_enum_1.SeverityEnum.Debug, extra, module);
    }
    /**
     * Logs the message based on the severity.
     * @param message The message to log.
     * @param severity The minimum severity to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    log(message, severity = severity_enum_1.SeverityEnum.Error, extra, module = "application") {
        var _a;
        const log = new log_model_1.LogModel(severity, message);
        log.kernelInstantiationId = this.kernelInstantiationId;
        log.traceId = this.tracingContext.traceId;
        log.extra = extra;
        log.module = module;
        log.date = new Date();
        // If the activateDiagnostics configuration is set to true, we will include additional information into a __diagnostics path into extra.
        // This is an intensive process so be careful, it will dramatically slow down your calls.
        if (this.activateDiagnostics) {
            const diagnostics = utils_1.Utils.getDiagnostics(new Error());
            // Properly define which last stack trace is actually the one we want to report. In this case, it's the stack trace
            // Just before any entries in LogHandler.
            for (const stackTrace of diagnostics.stackTrace) {
                if (stackTrace.className === undefined || stackTrace.className === "" || stackTrace.className.startsWith("LogHandler") || stackTrace.className.startsWith("Array")) {
                    continue;
                }
                diagnostics.lastStackTrace = stackTrace;
                break;
            }
            log.extra["__diagnostics"] = diagnostics;
        }
        // Log in every logger that is activated.
        for (const logger of this.loggers) {
            if (logger.isActive()) {
                (_a = logger.readableStream) === null || _a === void 0 ? void 0 : _a.push(log);
            }
        }
    }
};
LogHandler = __decorate([
    (0, common_1.tag)("LogHandlerInterface"),
    (0, tsyringe_1.injectable)(),
    __param(0, (0, tsyringe_1.injectAll)(common_1.ServiceDefinitionTagEnum.Logger)),
    __param(1, (0, tsyringe_1.inject)("%pristine.logging.logSeverityLevelConfiguration%")),
    __param(2, (0, tsyringe_1.inject)("%pristine.logging.activateDiagnostics%")),
    __param(3, (0, tsyringe_1.inject)(common_1.InternalContainerParameterEnum.KernelInstantiationId)),
    __metadata("design:paramtypes", [Array, Number, Boolean, String, common_1.TracingContext])
], LogHandler);
exports.LogHandler = LogHandler;
//# sourceMappingURL=log.handler.js.map