"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingModule = void 0;
const logging_module_keyname_1 = require("./logging.module.keyname");
const configuration_1 = require("@pristine-ts/configuration");
const output_mode_enum_1 = require("./enums/output-mode.enum");
const common_1 = require("@pristine-ts/common");
const severity_enum_1 = require("./enums/severity.enum");
__exportStar(require("./enums/enums"), exports);
__exportStar(require("./handlers/handlers"), exports);
__exportStar(require("./interfaces/interfaces"), exports);
__exportStar(require("./loggers/loggers"), exports);
__exportStar(require("./models/models"), exports);
__exportStar(require("./utils/utils"), exports);
__exportStar(require("./logging.module.keyname"), exports);
exports.LoggingModule = {
    keyname: logging_module_keyname_1.LoggingModuleKeyname,
    configurationDefinitions: [
        /**
         * The number of logs to keep in the stack and to print once a log with a high enough severity arrives.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".numberOfStackedLogs",
            isRequired: false,
            defaultValue: 10,
            defaultResolvers: [
                new configuration_1.NumberResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_NUMBER_OF_STACKED_LOGS")),
            ]
        },
        /**
         * The number representing the severity from which logs should be outputted.
         * For example, if this is set to 3, any log that has a severity of Error(3) or critical(4) will be outputted.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".logSeverityLevelConfiguration",
            defaultValue: severity_enum_1.SeverityEnum.Info,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.EnumResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_LOG_SEVERITY_LEVEL_CONFIGURATION"), severity_enum_1.SeverityEnum),
            ]
        },
        /**
         * The number of level to go down in an object when printing a log with the Debug severity.
         * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".logDebugDepthConfiguration",
            defaultValue: 5,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.NumberResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_LOG_DEBUG_DEPTH_CONFIGURATION")),
            ]
        },
        /**
         * The number of level to go down in an object when printing a log with the Info severity.
         * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".logInfoDepthConfiguration",
            defaultValue: 5,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.NumberResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_LOG_INFO_DEPTH_CONFIGURATION")),
            ]
        },
        /**
         * The number of level to go down in an object when printing a log with the Warning severity.
         * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".logWarningDepthConfiguration",
            defaultValue: 5,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.NumberResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_LOG_WARNING_DEPTH_CONFIGURATION")),
            ]
        },
        /**
         * The number of level to go down in an object when printing a log with the Error severity.
         * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".logErrorDepthConfiguration",
            defaultValue: 5,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.NumberResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_LOG_ERROR_DEPTH_CONFIGURATION")),
            ]
        },
        /**
         * The number of level to go down in an object when printing a log with the Critical severity.
         * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".logCriticalDepthConfiguration",
            defaultValue: 5,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.NumberResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_LOG_CRITICAL_DEPTH_CONFIGURATION")),
            ]
        },
        /**
         * Whether or not the console logger is activated and should output logs.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".consoleLoggerActivated",
            defaultValue: true,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.BooleanResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_CONSOLE_LOGGER_ACTIVATED")),
            ]
        },
        /**
         * The output mode, that the console logger should use from the OutputModeEnum.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".consoleLoggerOutputMode",
            defaultValue: output_mode_enum_1.OutputModeEnum.Json,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.EnumResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_CONSOLE_LOGGER_OUTPUT_MODE"), output_mode_enum_1.OutputModeEnum),
            ]
        },
        /**
         * The output mode, that the file logger should use from the OutputModeEnum.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".fileLoggerOutputMode",
            defaultValue: output_mode_enum_1.OutputModeEnum.Json,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.EnumResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_FILE_LOGGER_OUTPUT_MODE"), output_mode_enum_1.OutputModeEnum),
            ]
        },
        /**
         * Whether or not the console logger is activated and should output logs.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".fileLoggerActivated",
            defaultValue: false,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.BooleanResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_FILE_LOGGER_ACTIVATED")),
            ]
        },
        /**
         * The file path to which the file logger should output the logs.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".filePath",
            defaultValue: "./logs.txt",
            isRequired: false,
            defaultResolvers: [
                new configuration_1.BooleanResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_FILE_PATH")),
            ]
        },
        /**
         * Whether or not the file logger should prettify the outputted logs.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".fileLoggerPretty",
            defaultValue: false,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.BooleanResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_FILE_LOGGER_PRETTY")),
            ]
        },
        /**
         * Whether or not the diagnostic should be activated.
         * When activated, the stack trace and other diagnostic information will be added to the logs.
         * This is an intensive process and can dramatically reduce the performance of the code.
         */
        {
            parameterName: logging_module_keyname_1.LoggingModuleKeyname + ".activateDiagnostics",
            defaultValue: false,
            isRequired: false,
            defaultResolvers: [
                new configuration_1.BooleanResolver(new configuration_1.EnvironmentVariableResolver("PRISTINE_LOGGING_ACTIVATE_DIAGNOSTICS")),
            ]
        },
    ],
    importModules: [
        common_1.CommonModule,
        configuration_1.ConfigurationModule,
    ],
    providerRegistrations: []
};
//# sourceMappingURL=logging.module.js.map