import { LogModel } from "../models/log.model";
import { OutputModeEnum } from "../enums/output-mode.enum";
import { SeverityEnum } from "../enums/severity.enum";
import { DiagnosticsModel } from "../models/diagnostics.model";
/**
 * This class provides some utility functions to help with the logging.
 */
export declare class Utils {
    static flatTypes: (DateConstructor | StringConstructor | NumberConstructor | BooleanConstructor)[];
    /**
     * Returns whether or not the value is defined
     * @param val
     */
    static isDefined(val: any): boolean;
    /**
     * Returns whether or not the value is flat, meaning it is not an object.
     * @param val
     */
    static isFlat(val: any): number | true;
    /**
     * Gets the deep keys of an object.
     * @param obj The object.
     */
    static getDeepKeys(obj: any): string[];
    /**
     * This function truncates an object to the max depth required.
     * @param object The object to truncate.
     * @param maxDepth The max depth of the object.
     * @param curDepth The current depth at which we are at.
     */
    static truncate(object: any, maxDepth: number, curDepth?: number): any;
    /**
     * Gets the string representing a value of the log severity enum.
     * @param logSeverity The log severity for which to get the string representation.
     */
    static getSeverityText(logSeverity: SeverityEnum): string;
    /**
     * Returns the string formatted log based on the output model.
     * @param log The log to be string formatted.
     * @param outputMode The output mode desired.
     * @param logDepth The log depth.
     * @param spaceNumber The number of spaces for a tab.
     */
    static outputLog(log: LogModel, outputMode: OutputModeEnum, logDepth: number, spaceNumber?: number): string;
    /**
     * Creates the diagnostic model from an error object to attach to a log.
     * @param error The error object from which to get the stack trace.
     */
    static getDiagnostics(error: Error): DiagnosticsModel;
}
