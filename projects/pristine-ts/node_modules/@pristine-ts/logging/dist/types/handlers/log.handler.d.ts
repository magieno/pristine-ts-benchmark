import "reflect-metadata";
import { LoggerInterface } from "../interfaces/logger.interface";
import { TracingContext } from "@pristine-ts/common";
import { LogHandlerInterface } from "../interfaces/log-handler.interface";
/**
 * The LogHandler to use when we want to output some logs.
 * This handler makes sure that only the right level of logs are outputted, stacks logs, and logs with different loggers.
 * It is registered with the tag LogHandlerInterface so that it can be injected as a LogHandlerInterface to facilitate mocking.
 */
export declare class LogHandler implements LogHandlerInterface {
    private readonly loggers;
    private readonly logSeverityLevelConfiguration;
    private readonly activateDiagnostics;
    private readonly kernelInstantiationId;
    private readonly tracingContext;
    /**
     * The LogHandler to use when we want to output some logs.
     * @param loggers The loggers to use to output the logs. All services with the tag ServiceDefinitionTagEnum.Logger will be automatically injected here.
     * @param logSeverityLevelConfiguration The severity from which to start logging the logs.
     * @param activateDiagnostics Whether or not the outputted logs should contain the diagnostic part. This is an intensive process and can dramatically reduce the performance of the code.
     * @param kernelInstantiationId The id of instantiation of the kernel.
     * @param tracingContext The context of the tracing.
     */
    constructor(loggers: LoggerInterface[], logSeverityLevelConfiguration: number, activateDiagnostics: boolean, kernelInstantiationId: string, tracingContext: TracingContext);
    /**
     * This method terminates the loggers.
     */
    terminate(): void;
    /**
     * Logs the message if the severity is set to critical or above.
     * This function is wrapper function for the log method with the proper severity to make it cleaner when using it in the code.
     * @param message The message to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    critical(message: string, extra?: any, module?: string): void;
    /**
     * Logs the message if the severity is set to error or above.
     * This function is wrapper function for the log method with the proper severity to make it cleaner when using it in the code.
     * @param message The message to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    error(message: string, extra?: any, module?: string): void;
    /**
     * Logs the message if the severity is set to warning or above.
     * This function is wrapper function for the log method with the proper severity to make it cleaner when using it in the code.
     * @param message The message to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    warning(message: string, extra?: any, module?: string): void;
    /**
     * Logs the message if the severity is set to info or above.
     * This function is wrapper function for the log method with the proper severity to make it cleaner when using it in the code.
     * @param message The message to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    info(message: string, extra?: any, module?: string): void;
    /**
     * Logs the message if the severity is set to debug or above.
     * This function is wrapper function for the log method with the proper severity to make it cleaner when using it in the code.
     * @param message The message to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    debug(message: string, extra?: any, module?: string): void;
    /**
     * Logs the message based on the severity.
     * @param message The message to log.
     * @param severity The minimum severity to log.
     * @param extra The extra object to log.
     * @param module The module from where the log was created.
     */
    private log;
}
