/// <reference types="node" />
import { LogModel } from "../models/log.model";
import { LoggerInterface } from "../interfaces/logger.interface";
import { Readable, Writable } from "stream";
import { OutputModeEnum } from "../enums/output-mode.enum";
import { BaseLogger } from "./base.logger";
/**
 * The FileLogger outputs the logs into file.
 * It is registered with the tag Logger so that it can be injected along with all the other Loggers.
 * It is module scoped to the logging module so that it is only registered if the logging module is imported.
 */
export declare class FileLogger extends BaseLogger implements LoggerInterface {
    private readonly filePath;
    /**
     * The readable stream from which the logger reads the logs that need to be outputted.
     */
    readableStream?: Readable;
    /**
     * The writable stream used to write to the file.
     * @private
     */
    writableStream?: Writable;
    /**
     * The ConsoleLogger outputs the logs in the console.
     * @param numberOfStackedLogs The number of logs to keep in the stack and to print once a log with a high enough severity arrives.
     * @param logSeverityLevelConfiguration The number representing the severity from which logs should be outputted.
     * For example, if this is set to 3, any log that has a severity of Error(3) or critical(4) will be outputted.
     * @param logDebugDepthConfiguration The number of level to go down in an object when printing a log with the Debug severity.
     * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
     * @param logInfoDepthConfiguration The number of level to go down in an object when printing a log with the Info severity.
     * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
     * @param logWarningDepthConfiguration The number of level to go down in an object when printing a log with the Warning severity.
     * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
     * @param logErrorDepthConfiguration The number of level to go down in an object when printing a log with the Error severity.
     * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
     * @param logCriticalDepthConfiguration The number of level to go down in an object when printing a log with the Critical severity.
     * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
     * @param isActivated Whether or not this particular logger is activated and should output logs.
     * @param outputMode The output mode, that the logger should use.
     * @param fileLoggerPretty Whether or not the file logger should prettify the output.
     * @param filePath The file path where to output the log.
     */
    constructor(numberOfStackedLogs: number, logSeverityLevelConfiguration: number, logDebugDepthConfiguration: number, logInfoDepthConfiguration: number, logWarningDepthConfiguration: number, logErrorDepthConfiguration: number, logCriticalDepthConfiguration: number, isActivated: boolean, outputMode: OutputModeEnum, fileLoggerPretty: boolean, filePath: string);
    /**
     * This will be called when the logger is to be terminated. It must destroy the readable stream.
     */
    terminate(): void;
    /**
     * Initializes the file logger, and opens the write stream.
     * @protected
     */
    protected initialize(): void;
    /**
     * Outputs the log in the file.
     * @param log The log to be outputted
     * @protected
     */
    protected log(log: LogModel): void;
}
