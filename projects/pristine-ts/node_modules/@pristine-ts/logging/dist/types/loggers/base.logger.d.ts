import { LogModel } from "../models/log.model";
import { OutputModeEnum } from "../enums/output-mode.enum";
/**
 * The BaseLogger is the base abstract class that all internal loggers should extend.
 * It defines the basic logic that applies to all internal loggers.
 * External loggers could extend the base logger but it is not mandatory.
 */
export declare abstract class BaseLogger {
    protected readonly numberOfStackedLogs: number;
    protected readonly logSeverityLevelConfiguration: number;
    protected readonly logDebugDepthConfiguration: number;
    protected readonly logInfoDepthConfiguration: number;
    protected readonly logWarningDepthConfiguration: number;
    protected readonly logErrorDepthConfiguration: number;
    protected readonly logCriticalDepthConfiguration: number;
    private readonly isActivated;
    protected readonly outputMode: OutputModeEnum;
    protected readonly spaces: number;
    /**
     * The stacked logs are the logs that were not outputted right away but that will need to be outputted if a log with a higher severity arrives.
     * @private
     */
    private stackedLogs;
    /**
     * The BaseLogger is the base abstract class that all loggers should extend.
     * It defines the basic logic that applies to all loggers.
     * @param numberOfStackedLogs The number of logs to keep in the stack and to print once a log with a high enough severity arrives.
     * @param logSeverityLevelConfiguration The number representing the severity from which logs should be outputted.
     * For example, if this is set to 3, any log that has a severity of Error(3) or critical(4) will be outputted.
     * @param logDebugDepthConfiguration The number of level to go down in an object when printing a log with the Debug severity.
     * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
     * @param logInfoDepthConfiguration The number of level to go down in an object when printing a log with the Info severity.
     * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
     * @param logWarningDepthConfiguration The number of level to go down in an object when printing a log with the Warning severity.
     * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
     * @param logErrorDepthConfiguration The number of level to go down in an object when printing a log with the Error severity.
     * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
     * @param logCriticalDepthConfiguration The number of level to go down in an object when printing a log with the Critical severity.
     * We often do not need to go to the bottom layer of an object, so we can truncate at a certain depth.
     * @param isActivated Whether or not this particular logger is activated and should output logs.
     * @param outputMode The output mode, that the logger should use.
     * @param spaces The number of spaces to indent the outputted logs.
     */
    constructor(numberOfStackedLogs: number, logSeverityLevelConfiguration: number, logDebugDepthConfiguration: number, logInfoDepthConfiguration: number, logWarningDepthConfiguration: number, logErrorDepthConfiguration: number, logCriticalDepthConfiguration: number, isActivated?: boolean, outputMode?: OutputModeEnum, spaces?: number);
    /**
     * Initializes the logger. To be implemented in each logger.
     * @protected
     */
    protected abstract initialize(): void;
    /**
     * Returns whether this particular logger is active and should output logs.
     */
    isActive(): boolean;
    /**
     * Gets the formatted output log based on a log model.
     * @param log The log to be formatted.
     */
    getFormattedOutputLog(log: LogModel): string;
    /**
     * Actually outputs the log. To be implemented in each logger.
     * @param log The log to be outputted.
     * @protected
     */
    protected abstract log(log: LogModel): void;
    /**
     * Captures the log and evaluates which logs need to be outputted or stacked.
     * @param log The log to be captured.
     * @protected
     */
    protected captureLog(log: LogModel): void;
    /**
     * Sets up the stack of logs if it is required.
     * @param traceId Optional trace id to stack logs based on different requests.
     * @private
     */
    private setupStackedLogsArrayIfRequired;
    /**
     * Adds the log to the stacked logs and makes sure we only keep the right amount of stacked logs.
     * @param log The log to be added.
     * @private
     */
    private addStackedLog;
    /**
     * Outputs the stacked logs.
     * @param traceId Optional trace id so that we only output the stacked logs for this trace.
     * @private
     */
    private outputStackedLogs;
    /**
     * Clears the stacked logs.
     * @param traceId Optional trace id so that we only remove the stacked logs for this trace.
     * @private
     */
    private clearStackedLogs;
}
