var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { injectable } from "tsyringe";
import { HttpHeadersMapper } from "./http-headers.mapper";
import { MethodMapper } from "./method.mapper";
import { Request } from "@pristine-ts/common";
let RequestMapper = class RequestMapper {
    constructor(httpHeadersMapper, methodMapper) {
        this.httpHeadersMapper = httpHeadersMapper;
        this.methodMapper = methodMapper;
    }
    /**
     * Maps an http expressRequest from express to a Pristine expressRequest.
     * @param expressRequest The http expressRequest from express.
     */
    map(expressRequest) {
        const request = new Request(this.methodMapper.map(expressRequest.method), expressRequest.url);
        request.setHeaders(this.httpHeadersMapper.map(expressRequest.headers));
        request.body = expressRequest.body;
        request.rawBody = expressRequest.body;
        return request;
    }
};
RequestMapper = __decorate([
    injectable(),
    __metadata("design:paramtypes", [HttpHeadersMapper,
        MethodMapper])
], RequestMapper);
export { RequestMapper };
//# sourceMappingURL=request.mapper.js.map