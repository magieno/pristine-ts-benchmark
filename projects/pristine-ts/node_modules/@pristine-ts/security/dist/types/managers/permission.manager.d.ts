import { VoterInterface } from "../interfaces/voter.interface";
import { VotingStrategyEnum } from "../enums/voting-strategy.enum";
import { LogHandlerInterface } from "@pristine-ts/logging";
import { IdentityInterface } from "@pristine-ts/common";
/**
 * The permission manager verifies if the correct permission are there to access and take an action on a resource.
 */
export declare class PermissionManager {
    private readonly voters;
    private readonly logHandler;
    /**
     * The permission manager verifies if the correct permission are there to access and take an action on a resource.
     * @param voters The voters that determine if access is granted.
     * All services with the tag ServiceDefinitionTagEnum.Voter will be injected here
     * @param logHandler The log handler to output logs.
     */
    constructor(voters: VoterInterface[], logHandler: LogHandlerInterface);
    /**
     * Returns whether or not the permission manager grants access to the resource.
     * @param identity The identity trying to have access to a resource.
     * @param action The action trying to be executed on the resource.
     * @param resource The resource being accessed.
     * @param votingStrategy The voting strategy that defines how to merge the votes. Default is DenyOnUnanimousAbstention.
     */
    hasAccessToResource(identity: IdentityInterface, action: string, resource: object, votingStrategy?: VotingStrategyEnum): Promise<boolean>;
}
