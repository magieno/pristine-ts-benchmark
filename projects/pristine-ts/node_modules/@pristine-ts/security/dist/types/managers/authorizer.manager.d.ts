import { DependencyContainer } from "tsyringe";
import { LogHandlerInterface } from "@pristine-ts/logging";
import { IdentityInterface } from "@pristine-ts/common";
import { AuthorizerManagerInterface } from "../interfaces/authorizer-manager.interface";
import { GuardFactory } from "../factories/guard.factory";
import { Request } from "@pristine-ts/common";
/**
 * The authorizer manager provides authorization by authorizing the action.
 * It is tagged and can be injected using AuthorizerManagerInterface which facilitates mocking.
 */
export declare class AuthorizerManager implements AuthorizerManagerInterface {
    private readonly logHandler;
    private readonly guardFactory;
    /**
     * The authorizer manager provides authorization by authorizing the action.
     * @param logHandler The log handler to output logs.
     * @param guardFactory The factory to create the guard.
     */
    constructor(logHandler: LogHandlerInterface, guardFactory: GuardFactory);
    /**
     * Returns whether or not the request is authorized to access the route.
     * @param request The request to authorize.
     * @param routeContext The route context.
     * @param container The dependency container to resolve the guard from.
     * @param identity The identity making the request.
     */
    isAuthorized(request: Request, routeContext: any, container: DependencyContainer, identity?: IdentityInterface): Promise<boolean>;
}
