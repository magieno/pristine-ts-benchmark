var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { injectable, injectAll, inject } from "tsyringe";
import { VotingStrategyEnum } from "../enums/voting-strategy.enum";
import { VoteEnum } from "../enums/vote.enum";
import { ServiceDefinitionTagEnum } from "@pristine-ts/common";
import { SecurityModuleKeyname } from "../security.module.keyname";
/**
 * The permission manager verifies if the correct permission are there to access and take an action on a resource.
 */
let PermissionManager = class PermissionManager {
    /**
     * The permission manager verifies if the correct permission are there to access and take an action on a resource.
     * @param voters The voters that determine if access is granted.
     * All services with the tag ServiceDefinitionTagEnum.Voter will be injected here
     * @param logHandler The log handler to output logs.
     */
    constructor(voters, logHandler) {
        this.voters = voters;
        this.logHandler = logHandler;
    }
    /**
     * Returns whether or not the permission manager grants access to the resource.
     * @param identity The identity trying to have access to a resource.
     * @param action The action trying to be executed on the resource.
     * @param resource The resource being accessed.
     * @param votingStrategy The voting strategy that defines how to merge the votes. Default is DenyOnUnanimousAbstention.
     */
    hasAccessToResource(identity, action, resource, votingStrategy = VotingStrategyEnum.DenyOnUnanimousAbstention) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.voters.length === 0) {
                this.logHandler.warning("PERMISSION MANAGER - No voters were found.", {
                    identity,
                    action,
                    resource,
                }, SecurityModuleKeyname);
            }
            const votes = [];
            for (const voter of this.voters) {
                if (voter.supports(resource) === false) {
                    this.logHandler.debug("PERMISSION MANAGER - [" + voter.constructor.name + "] - Doesn't support this resource.", { identity, action, resource, voter: voter.constructor.name }, SecurityModuleKeyname);
                    continue;
                }
                try {
                    const vote = yield voter.vote(identity, action, resource);
                    this.logHandler.debug("PERMISSION MANAGER - [" + voter.constructor.name + "] - Decision: " + vote, { identity, action, resource, voter: voter.constructor.name }, SecurityModuleKeyname);
                    votes.push(vote);
                }
                catch (error) {
                    this.logHandler.error("Error while voting", { error, resource, voter: voter.constructor.name }, SecurityModuleKeyname);
                    throw error;
                }
            }
            let shouldGrantAccess = !votes.includes(VoteEnum.Deny);
            if (votingStrategy === VotingStrategyEnum.DenyOnUnanimousAbstention) {
                if (votes.length === 0 || votes.every((vote) => vote === VoteEnum.Abstain)) {
                    shouldGrantAccess = false;
                }
            }
            this.logHandler.info("PERMISSION MANAGER - " + (shouldGrantAccess ? "GRANTED" : "DENIED") + " - Resource: " + resource.constructor.name, { identity, action, resource }, SecurityModuleKeyname);
            return shouldGrantAccess;
        });
    }
};
PermissionManager = __decorate([
    injectable(),
    __param(0, injectAll(ServiceDefinitionTagEnum.Voter)),
    __param(1, inject("LogHandlerInterface")),
    __metadata("design:paramtypes", [Array, Object])
], PermissionManager);
export { PermissionManager };
//# sourceMappingURL=permission.manager.js.map