var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { inject, injectable } from "tsyringe";
import { moduleScoped, tag } from "@pristine-ts/common";
import { GuardFactory } from "../factories/guard.factory";
import { SecurityModuleKeyname } from "../security.module.keyname";
/**
 * The authorizer manager provides authorization by authorizing the action.
 * It is tagged and can be injected using AuthorizerManagerInterface which facilitates mocking.
 */
let AuthorizerManager = class AuthorizerManager {
    /**
     * The authorizer manager provides authorization by authorizing the action.
     * @param logHandler The log handler to output logs.
     * @param guardFactory The factory to create the guard.
     */
    constructor(logHandler, guardFactory) {
        this.logHandler = logHandler;
        this.guardFactory = guardFactory;
    }
    /**
     * Returns whether or not the request is authorized to access the route.
     * @param request The request to authorize.
     * @param routeContext The route context.
     * @param container The dependency container to resolve the guard from.
     * @param identity The identity making the request.
     */
    isAuthorized(request, routeContext, container, identity) {
        return __awaiter(this, void 0, void 0, function* () {
            // If there are no guards defined, we simply return that it is authorized.
            if (!routeContext || routeContext.guards === undefined || Array.isArray(routeContext.guards) === false) {
                return true;
            }
            let isAuthorized = true;
            for (const guardContext of routeContext.guards) {
                try {
                    const instantiatedGuard = this.guardFactory.fromContext(guardContext, container);
                    yield instantiatedGuard.setContext(guardContext);
                    const didAuthorize = yield instantiatedGuard.isAuthorized(request, identity);
                    isAuthorized = isAuthorized && didAuthorize;
                }
                catch (e) {
                    this.logHandler.error(e.message, SecurityModuleKeyname);
                    isAuthorized = false;
                }
            }
            return isAuthorized;
        });
    }
};
AuthorizerManager = __decorate([
    moduleScoped(SecurityModuleKeyname),
    tag("AuthorizerManagerInterface"),
    injectable(),
    __param(0, inject("LogHandlerInterface")),
    __metadata("design:paramtypes", [Object, GuardFactory])
], AuthorizerManager);
export { AuthorizerManager };
//# sourceMappingURL=authorizer.manager.js.map