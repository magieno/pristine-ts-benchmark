"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationManager = void 0;
const tsyringe_1 = require("tsyringe");
const common_1 = require("@pristine-ts/common");
const authenticator_factory_1 = require("../factories/authenticator.factory");
const security_module_keyname_1 = require("../security.module.keyname");
/**
 * The authentication manager provides authentication by returning the identity executing the action.
 * It is tagged and can be injected using AuthenticationManagerInterface which facilitates mocking.
 */
let AuthenticationManager = class AuthenticationManager {
    /**
     * The authentication manager provides authentication by returning the identity executing the action.
     * @param identityProviders The identity providers to use to provide the identity. All services tagged with ServiceDefinitionTagEnum.IdentityProvider will be injected here.
     * @param logHandler The log handler to output logs.
     * @param authenticatorFactory The factory to create the authenticator.
     */
    constructor(identityProviders, logHandler, authenticatorFactory) {
        this.identityProviders = identityProviders;
        this.logHandler = logHandler;
        this.authenticatorFactory = authenticatorFactory;
    }
    /**
     * Authenticates a request by providing the identity that made the request.
     * @param request The request to authenticate
     * @param routeContext The context associated with the route.
     * @param container The dependency container from which to resolve the authenticator.
     */
    authenticate(request, routeContext, container) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!routeContext || routeContext.authenticator === undefined) {
                return undefined;
            }
            let identity;
            const authenticatorContext = routeContext.authenticator;
            try {
                const instantiatedAuthenticator = this.authenticatorFactory.fromContext(authenticatorContext, container);
                yield instantiatedAuthenticator.setContext(authenticatorContext);
                identity = yield instantiatedAuthenticator.authenticate(request);
                if (identity == undefined) {
                    return identity;
                }
                // Loop over the identity providers
                for (const identityProvider of this.identityProviders) {
                    identity = yield identityProvider.provide(identity);
                }
            }
            catch (e) {
                this.logHandler.error(e.message, { e }, security_module_keyname_1.SecurityModuleKeyname);
                throw e;
            }
            return identity;
        });
    }
};
AuthenticationManager = __decorate([
    (0, common_1.moduleScoped)(security_module_keyname_1.SecurityModuleKeyname),
    (0, common_1.tag)("AuthenticationManagerInterface"),
    (0, tsyringe_1.injectable)(),
    __param(0, (0, tsyringe_1.injectAll)(common_1.ServiceDefinitionTagEnum.IdentityProvider)),
    __param(1, (0, tsyringe_1.inject)("LogHandlerInterface")),
    __metadata("design:paramtypes", [Array, Object, authenticator_factory_1.AuthenticatorFactory])
], AuthenticationManager);
exports.AuthenticationManager = AuthenticationManager;
//# sourceMappingURL=authentication.manager.js.map