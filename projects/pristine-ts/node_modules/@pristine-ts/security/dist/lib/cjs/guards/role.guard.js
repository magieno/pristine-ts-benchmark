"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleGuard = void 0;
const tsyringe_1 = require("tsyringe");
/**
 * The role guard is a guard that validates if the identity making the request has the required roles.
 */
let RoleGuard = class RoleGuard {
    /**
     * The role guard is a guard that validates if the identity making the request has the required roles.
     * @param rolesClaimKey The key in the claims of the access token where the roles are defined.
     */
    constructor(rolesClaimKey) {
        this.rolesClaimKey = rolesClaimKey;
        /**
         * The keyname of the guard.
         */
        this.keyname = "role";
    }
    /**
     * Sets the context for the guard.
     * @param context The context for the guard to use.
     */
    setContext(context) {
        this.guardContext = context;
        return Promise.resolve();
    }
    /**
     * Returns whether or not the guard authorizes the request.
     * For the role guard, it validates that the identity making the request has the requested roles.
     * The identity needs all of the requested roles to be authorized.
     * @param request The request to authorize.
     * @param identity The identity making the request.
     */
    isAuthorized(request, identity) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const neededRoles = [];
            // If we have no context we deny.
            if (this.guardContext === undefined) {
                return false;
            }
            // Find what roles are needed based on the context.
            if (this.guardContext.options && this.guardContext.options.hasOwnProperty("roles") && Array.isArray(this.guardContext.options.roles)) {
                neededRoles.push(...this.guardContext.options.roles);
            }
            // If the identity does not have a roles claim, we deny.
            if (neededRoles.length > 0 && (((_a = identity === null || identity === void 0 ? void 0 : identity.claims) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(this.rolesClaimKey)) === false || !Array.isArray(identity === null || identity === void 0 ? void 0 : identity.claims[this.rolesClaimKey]))) {
                return false;
            }
            // If the identity is missing one of the needed roles, we deny.
            for (const role of neededRoles) {
                if (!(identity === null || identity === void 0 ? void 0 : identity.claims[this.rolesClaimKey].includes(role))) {
                    return false;
                }
            }
            // If the identity has all the requested roles we authorize.
            return true;
        });
    }
};
RoleGuard = __decorate([
    (0, tsyringe_1.injectable)(),
    __param(0, (0, tsyringe_1.inject)("%pristine.security.rolesClaimKey%")),
    __metadata("design:paramtypes", [String])
], RoleGuard);
exports.RoleGuard = RoleGuard;
//# sourceMappingURL=role.guard.js.map