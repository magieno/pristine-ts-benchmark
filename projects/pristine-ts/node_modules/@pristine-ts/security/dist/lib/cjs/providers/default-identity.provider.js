"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultIdentityProvider = void 0;
const common_1 = require("@pristine-ts/common");
const security_module_keyname_1 = require("../security.module.keyname");
const tsyringe_1 = require("tsyringe");
/**
 * This default identity provider is here so that there is always at least one service tagged with IdentityProvider
 * Until there's a fix for: https://github.com/microsoft/tsyringe/issues/63
 * It resolves the same identity it is passed.
 */
let DefaultIdentityProvider = class DefaultIdentityProvider {
    provide(identity) {
        return Promise.resolve(identity);
    }
};
DefaultIdentityProvider = __decorate([
    (0, tsyringe_1.injectable)(),
    (0, common_1.tag)(common_1.ServiceDefinitionTagEnum.IdentityProvider),
    (0, common_1.moduleScoped)(security_module_keyname_1.SecurityModuleKeyname)
], DefaultIdentityProvider);
exports.DefaultIdentityProvider = DefaultIdentityProvider;
//# sourceMappingURL=default-identity.provider.js.map