"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authenticator = void 0;
const authenticator_decorator_error_1 = require("../errors/authenticator-decorator.error");
/**
 * This decorator specifies the authenticator that should be used to authenticate a request.
 * It should be used either on a controller class or directly on a method.
 * @param authenticator The authenticator to use.
 * @param options Any options that will be passed on to the authenticator.
 */
const authenticator = (authenticator, options) => {
    return (target, propertyKey, descriptor) => {
        // This is the condition to check that the authenticator is valid.
        if (!(authenticator && ((typeof authenticator === 'function' && typeof authenticator.prototype.authenticate === 'function' && typeof authenticator.prototype.setContext === 'function') ||
            (typeof authenticator === 'object' && typeof authenticator.authenticate === 'function' && typeof authenticator.setContext === 'function')))) {
            throw new authenticator_decorator_error_1.AuthenticatorDecoratorError("The authenticator isn't valid. It isn't a function or doesn't implement both the 'authenticate' and the 'setContext' methods.", authenticator, options, target, propertyKey, descriptor);
        }
        // Construct the Guard Context.
        const authenticatorContext = {
            constructorName: authenticator.prototype.constructor.name,
            authenticator,
            options,
        };
        // If there's a descriptor, then it's not a controller authenticator, but a method authenticator
        if (descriptor && propertyKey) {
            if (target.constructor.prototype.hasOwnProperty("__metadata__") === false) {
                target.constructor.prototype["__metadata__"] = {};
            }
            if (target.constructor.prototype["__metadata__"].hasOwnProperty("methods") === false) {
                target.constructor.prototype["__metadata__"]["methods"] = {};
            }
            if (target.constructor.prototype["__metadata__"]["methods"].hasOwnProperty(propertyKey) === false) {
                target.constructor.prototype["__metadata__"]["methods"][propertyKey] = {};
            }
            if (target.constructor.prototype["__metadata__"]["methods"][propertyKey].hasOwnProperty("__routeContext__") === false) {
                target.constructor.prototype["__metadata__"]["methods"][propertyKey]["__routeContext__"] = {};
            }
            target.constructor.prototype["__metadata__"]["methods"][propertyKey]["__routeContext__"]["authenticator"] = authenticatorContext;
        }
        else {
            if (target.prototype.hasOwnProperty("__metadata__") === false) {
                target.prototype["__metadata__"] = {};
            }
            if (target.prototype["__metadata__"].hasOwnProperty("controller") === false) {
                target.prototype["__metadata__"]["controller"] = {};
            }
            if (target.prototype["__metadata__"]["controller"].hasOwnProperty("__routeContext__") === false) {
                target.prototype["__metadata__"]["controller"]["__routeContext__"] = {};
            }
            target.prototype["__metadata__"]["controller"]["__routeContext__"]["authenticator"] = authenticatorContext;
        }
    };
};
exports.authenticator = authenticator;
//# sourceMappingURL=authenticator.decorator.js.map