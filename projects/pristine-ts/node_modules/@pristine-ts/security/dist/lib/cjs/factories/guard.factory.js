"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuardFactory = void 0;
const tsyringe_1 = require("tsyringe");
const guard_instantiation_error_1 = require("../errors/guard-instantiation.error");
/**
 * The GuardFactory returns the proper instantiated guard.
 */
let GuardFactory = class GuardFactory {
    /**
     * This function takes the guard context and returns the proper instantiated guard.
     * It also validates that the guard is valid (it implements the GuardInterface).
     * @param guardContext The guard context that contains the guard and the options to use.
     * @param container The dependency container from which to retrieve the instantiated guard.
     */
    fromContext(guardContext, container) {
        // Check if the guard needs to be instantiated
        let instantiatedGuard = guardContext.guard;
        // If guardContext.guard  is a function, we resolve that function through the container.
        // TODO: validate if this is good.
        if (typeof instantiatedGuard === 'function') {
            instantiatedGuard = container.resolve(instantiatedGuard);
        }
        // Check again if the class has the isAuthorized method
        if (typeof instantiatedGuard.isAuthorized !== 'function') {
            throw new guard_instantiation_error_1.GuardInstantiationError("The guard doesn't implement the isAuthorized() method.", instantiatedGuard, guardContext);
        }
        // Check again if the class has the setContext method
        if (typeof instantiatedGuard.setContext !== 'function') {
            throw new guard_instantiation_error_1.GuardInstantiationError("The guard doesn't implement the setContext() method.", instantiatedGuard, guardContext);
        }
        return instantiatedGuard;
    }
};
GuardFactory = __decorate([
    (0, tsyringe_1.injectable)()
], GuardFactory);
exports.GuardFactory = GuardFactory;
//# sourceMappingURL=guard.factory.js.map