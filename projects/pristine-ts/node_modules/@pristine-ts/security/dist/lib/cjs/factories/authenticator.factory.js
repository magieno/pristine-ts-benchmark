"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticatorFactory = void 0;
const tsyringe_1 = require("tsyringe");
const authenticator_instantiation_error_1 = require("../errors/authenticator-instantiation.error");
/**
 * The AuthenticatorFactory returns the proper instantiated authenticator.
 */
let AuthenticatorFactory = class AuthenticatorFactory {
    /**
     * This function takes the authenticator context and returns the proper instantiated authenticator.
     * It also validates that the authenticator is valid (it implements the AuthenticatorInterface).
     * @param authenticatorContext The authenticator context that holds the authenticator and options to use.
     * @param container The dependency container from which to retrieve the instantiated authenticator.
     */
    fromContext(authenticatorContext, container) {
        // Check if the guard needs to be instantiated
        let instantiatedAuthenticator = authenticatorContext.authenticator;
        // If authenticatorContext.authenticator is a function, we resolve that function through the container.
        // TODO: validate if this is good.
        if (typeof instantiatedAuthenticator === 'function') {
            instantiatedAuthenticator = container.resolve(instantiatedAuthenticator);
        }
        // Check again if the class has the authenticate method
        if (typeof instantiatedAuthenticator.authenticate !== 'function') {
            throw new authenticator_instantiation_error_1.AuthenticatorInstantiationError("The authenticator isn't valid. It isn't a function or doesn't implement the 'authenticate' method.", instantiatedAuthenticator, authenticatorContext);
        }
        // Check again if the class has the setContext method
        if (typeof instantiatedAuthenticator.setContext !== 'function') {
            throw new authenticator_instantiation_error_1.AuthenticatorInstantiationError("The authenticator isn't valid. It isn't a function or doesn't implement the 'setContext' method.", instantiatedAuthenticator, authenticatorContext);
        }
        return instantiatedAuthenticator;
    }
};
AuthenticatorFactory = __decorate([
    (0, tsyringe_1.injectable)()
], AuthenticatorFactory);
exports.AuthenticatorFactory = AuthenticatorFactory;
//# sourceMappingURL=authenticator.factory.js.map