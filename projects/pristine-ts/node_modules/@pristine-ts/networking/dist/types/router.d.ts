import { DependencyContainer } from "tsyringe";
import { RouterInterface } from "./interfaces/router.interface";
import { Route } from "./models/route";
import { ControllerMethodParameterDecoratorResolver } from "./resolvers/controller-method-parameter-decorator.resolver";
import { HttpMethod, Request, Response } from "@pristine-ts/common";
import { AuthenticationManagerInterface, AuthorizerManagerInterface } from "@pristine-ts/security";
import { LogHandlerInterface } from "@pristine-ts/logging";
/**
 * The router service is the service that creates the routing tree from the controllers.
 * It also executes a request properly by routing it to the intended controller and returns the response.
 */
export declare class Router implements RouterInterface {
    private readonly loghandler;
    private readonly controllerMethodParameterDecoratorResolver;
    private readonly authorizerManager;
    private readonly authenticationManager;
    private root;
    private setupCompleted;
    /**
     * The router service is the service that creates the routing tree from the controllers.
     * It also executes a request properly by routing it to the intended controller and returns the response.
     * @param loghandler The log handler
     * @param controllerMethodParameterDecoratorResolver The controller method parameter decorator resolver used to resolve the values.
     * @param authorizerManager The authorizer manager to validate authorization.
     * @param authenticationManager The authentication manager to validate authentication.
     */
    constructor(loghandler: LogHandlerInterface, controllerMethodParameterDecoratorResolver: ControllerMethodParameterDecoratorResolver, authorizerManager: AuthorizerManagerInterface, authenticationManager: AuthenticationManagerInterface);
    /**
     * This method returns the whole route tree as a string.
     */
    getRouteTree(): string;
    /**
     * This method takes the existing message and appends the following levels to it.
     * It calls itself recursively.
     * @param node The node to print the following levels.
     * @param message The existing message on which to append.
     * @param level The level at which we are at.
     */
    private getRouteTreeLevel;
    /**
     * This method registers a Route into the Route Tree maintained by the router.
     *
     * @param path
     * @param method
     * @param route
     */
    register(path: string, method: HttpMethod | string, route: Route): void;
    setup(): void;
    /**
     * This method receives a Request object, identifies the "path" its trying to hit, navigates the internally
     * maintained Route Tree, identifies the method in the controller that represents this "path", and calls the
     * method with the specified parameters.
     *
     * @param request
     * @param container
     */
    execute(request: Request, container: DependencyContainer): Promise<Response>;
    /**
     * This method executes all the Request Interceptors and returns the request updated by the interceptors.
     *
     * @param request
     * @param container
     * @param methodNode
     * @private
     */
    private executeRequestInterceptors;
    /**
     * This method executes all the Request Interceptors and returns the response updated by the interceptors.
     *
     * @param response
     * @param request
     * @param container
     * @param methodNode
     * @private
     */
    private executeResponseInterceptors;
    /**
     * This method executes all the Request Interceptors and returns the response updated by the error interceptors.
     *
     * @param error
     * @param request
     * @param container
     * @param methodNode
     * @private
     */
    private executeErrorResponseInterceptors;
}
