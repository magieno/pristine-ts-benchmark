import { Request, Response } from "@pristine-ts/common";
import { MethodRouterNode } from "../nodes/method-router.node";
import { RequestInterceptorInterface } from "../interfaces/request-interceptor.interface";
import { LogHandlerInterface } from "@pristine-ts/logging";
/**
 * The Default ContentType Response Header Interceptor intercepts the response of the router and adds the default content-type header to the response.
 * It is tagged as a RequestInterceptor so it can be automatically injected with the all the other RequestInterceptor.
 */
export declare class DefaultContentTypeResponseHeaderInterceptor implements RequestInterceptorInterface {
    private readonly defaultContentTypeResponseHeader;
    private readonly isActive;
    private readonly logHandler;
    /**
     * The Default ContentType Response Header Interceptor intercepts the response of the router and adds the default content-type header to the response.
     * It is tagged as a RequestInterceptor so it can be automatically injected with the all the other RequestInterceptor.
     * @param defaultContentTypeResponseHeader The default Content-Type response header to set on responses that do not already have Content-Types.
     * @param isActive Whether or not this interceptor is active.
     * @param logHandler The log handler to output logs.
     */
    constructor(defaultContentTypeResponseHeader: string, isActive: boolean, logHandler: LogHandlerInterface);
    /**
     * Intercepts the response from the router and adds the Content-Type header to it if it's not already there, with the default provided.
     * @param response The response to intercept.
     * @param request The request that triggered this response.
     * @param methodNode The methode node.
     */
    interceptResponse(response: Response, request: Request, methodNode?: MethodRouterNode): Promise<Response>;
}
