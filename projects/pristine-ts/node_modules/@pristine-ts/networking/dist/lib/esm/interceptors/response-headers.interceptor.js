var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { moduleScoped, ServiceDefinitionTagEnum, tag } from "@pristine-ts/common";
import { NetworkingModuleKeyname } from "../networking.module.keyname";
import { injectable } from "tsyringe";
/**
 * The Response Interceptor intercepts the response of the router by adding the response headers specified by the response header decorator.
 * It is tagged as a RequestInterceptor so it can be automatically injected with the all the other RequestInterceptor.
 */
let ResponseHeadersInterceptor = class ResponseHeadersInterceptor {
    /**
     * Intercepts the response from the router and adds the headers specified by the response header decorator.
     * @param response The response to intercept.
     * @param request The request that triggered this response.
     * @param methodNode The methode node.
     */
    interceptResponse(response, request, methodNode) {
        return __awaiter(this, void 0, void 0, function* () {
            if (methodNode && methodNode.route.context && methodNode.route.context.hasOwnProperty("responseHeaders")) {
                response.setHeaders(Object.assign(Object.assign({}, response.headers), methodNode.route.context.responseHeaders));
            }
            return response;
        });
    }
};
ResponseHeadersInterceptor = __decorate([
    tag(ServiceDefinitionTagEnum.RequestInterceptor),
    moduleScoped(NetworkingModuleKeyname),
    injectable()
], ResponseHeadersInterceptor);
export { ResponseHeadersInterceptor };
//# sourceMappingURL=response-headers.interceptor.js.map