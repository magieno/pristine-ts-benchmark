var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { moduleScoped, ServiceDefinitionTagEnum, tag } from "@pristine-ts/common";
import { NetworkingModuleKeyname } from "../networking.module.keyname";
import { injectable, inject } from "tsyringe";
/**
 * The Default ContentType Response Header Interceptor intercepts the response of the router and adds the default content-type header to the response.
 * It is tagged as a RequestInterceptor so it can be automatically injected with the all the other RequestInterceptor.
 */
let DefaultContentTypeResponseHeaderInterceptor = class DefaultContentTypeResponseHeaderInterceptor {
    /**
     * The Default ContentType Response Header Interceptor intercepts the response of the router and adds the default content-type header to the response.
     * It is tagged as a RequestInterceptor so it can be automatically injected with the all the other RequestInterceptor.
     * @param defaultContentTypeResponseHeader The default Content-Type response header to set on responses that do not already have Content-Types.
     * @param isActive Whether or not this interceptor is active.
     * @param logHandler The log handler to output logs.
     */
    constructor(defaultContentTypeResponseHeader, isActive, logHandler) {
        this.defaultContentTypeResponseHeader = defaultContentTypeResponseHeader;
        this.isActive = isActive;
        this.logHandler = logHandler;
    }
    /**
     * Intercepts the response from the router and adds the Content-Type header to it if it's not already there, with the default provided.
     * @param response The response to intercept.
     * @param request The request that triggered this response.
     * @param methodNode The methode node.
     */
    interceptResponse(response, request, methodNode) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isActive === false) {
                return response;
            }
            if (response.hasHeader("content-type")) {
                return response;
            }
            response.setHeader("content-type", this.defaultContentTypeResponseHeader);
            this.logHandler.debug("Set the default content type response header.", { response });
            return response;
        });
    }
};
DefaultContentTypeResponseHeaderInterceptor = __decorate([
    tag(ServiceDefinitionTagEnum.RequestInterceptor),
    moduleScoped(NetworkingModuleKeyname),
    injectable(),
    __param(0, inject(`%${NetworkingModuleKeyname}.defaultContentTypeResponseHeader%`)),
    __param(1, inject(`%${NetworkingModuleKeyname}.defaultContentTypeResponseHeader.isActive%`)),
    __param(2, inject("LogHandlerInterface")),
    __metadata("design:paramtypes", [String, Boolean, Object])
], DefaultContentTypeResponseHeaderInterceptor);
export { DefaultContentTypeResponseHeaderInterceptor };
//# sourceMappingURL=default-content-type-response-header.interceptor.js.map