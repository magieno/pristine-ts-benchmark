"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestEventHandler = void 0;
const core_1 = require("@pristine-ts/core");
const tsyringe_1 = require("tsyringe");
const common_1 = require("@pristine-ts/common");
const networking_module_keyname_1 = require("../networking.module.keyname");
let RequestEventHandler = class RequestEventHandler {
    constructor(router, logHandler, tracingManager, dependencyContainer) {
        this.router = router;
        this.logHandler = logHandler;
        this.tracingManager = tracingManager;
        this.dependencyContainer = dependencyContainer;
        this.priority = 10000; // Arbitrarily set to 10 000 so that another handler can have more priority, but be certain you know what you are doing.
    }
    supports(event) {
        return event.payload instanceof common_1.Request;
    }
    handle(event) {
        return __awaiter(this, void 0, void 0, function* () {
            // todo: add tracing to calculate router setup
            // We can use the injected TracingManager
            this.router.setup();
            //previous code:
            //     const routerSetupSpan = new Span(SpanKeynameEnum.RouterSetup);
            //
            //     // Setup the router
            //     this.setupRouter();
            //
            //     routerSetupSpan.endDate = Date.now();
            //     this.initializationSpan.addChild(routerSetupSpan);
            //todo add tracing to calculate request execution
            // todo catch if the method throws even though it should never throw.
            this.logHandler.debug("RequestEventHandler - Execute request using Router - Start", {
                event,
            });
            const response = yield this.router.execute(event.payload, this.dependencyContainer);
            this.logHandler.debug("RequestEventHandler - Execute request using Router - End", {
                event,
                response,
            });
            //previous code:
            // const requestSpan = tracingManager.startSpan(SpanKeynameEnum.RequestExecution);
            return new core_1.EventResponse(event, response);
        });
    }
};
RequestEventHandler = __decorate([
    (0, common_1.moduleScoped)(networking_module_keyname_1.NetworkingModuleKeyname),
    (0, common_1.tag)(common_1.ServiceDefinitionTagEnum.EventHandler),
    (0, tsyringe_1.injectable)(),
    __param(0, (0, tsyringe_1.inject)("RouterInterface")),
    __param(1, (0, tsyringe_1.inject)("LogHandlerInterface")),
    __param(2, (0, tsyringe_1.inject)("TracingManagerInterface")),
    __param(3, (0, tsyringe_1.inject)(common_1.ServiceDefinitionTagEnum.CurrentChildContainer)),
    __metadata("design:paramtypes", [Object, Object, Object, Object])
], RequestEventHandler);
exports.RequestEventHandler = RequestEventHandler;
//# sourceMappingURL=request.event-handler.js.map