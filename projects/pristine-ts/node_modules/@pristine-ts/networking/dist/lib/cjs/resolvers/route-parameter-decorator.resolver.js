"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouteParameterDecoratorResolver = void 0;
const tsyringe_1 = require("tsyringe");
const common_1 = require("@pristine-ts/common");
const networking_module_keyname_1 = require("../networking.module.keyname");
/**
 * The RouteParameterDecoratorResolver resolves the value of the route parameter specified of the request so that it can be injected it into the
 * parameter of the route of the controller that was annotated with the @routeParameter decorator.
 * It is tagged as an MethodParameterDecoratorResolver so it can be automatically injected with the all the other MethodParameterDecoratorResolvers.
 */
let RouteParameterDecoratorResolver = class RouteParameterDecoratorResolver {
    /**
     * Resolves the value of the the route parameter with the specified name of the request.
     * The router than injects that value into the parameter of the controller method.
     * @param methodArgument The method argument created by the decorator, including the name of the parameter to resolve.
     * @param request The request
     * @param routeParameters The router parameters
     * @param identity The identity making the request
     */
    resolve(methodArgument, request, routeParameters, identity) {
        var _a;
        return Promise.resolve((_a = routeParameters[methodArgument.routeParameterName]) !== null && _a !== void 0 ? _a : null);
    }
    /**
     * Returns whether or not the resolver support such a method argument.
     * Usually we will check the methodArgument.type field to determine if it is a supported type.
     * @param methodArgument
     */
    supports(methodArgument) {
        return methodArgument && methodArgument.hasOwnProperty("type") && methodArgument.type === "routeParameter";
    }
};
RouteParameterDecoratorResolver = __decorate([
    (0, common_1.moduleScoped)(networking_module_keyname_1.NetworkingModuleKeyname),
    (0, common_1.tag)(common_1.ServiceDefinitionTagEnum.MethodParameterDecoratorResolver),
    (0, tsyringe_1.injectable)()
], RouteParameterDecoratorResolver);
exports.RouteParameterDecoratorResolver = RouteParameterDecoratorResolver;
//# sourceMappingURL=route-parameter-decorator.resolver.js.map