"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControllerMethodParameterDecoratorResolver = void 0;
const tsyringe_1 = require("tsyringe");
const common_1 = require("@pristine-ts/common");
/**
 * This service calls the resolvers to resolve the value to be injected in the parameter of a method.
 */
let ControllerMethodParameterDecoratorResolver = class ControllerMethodParameterDecoratorResolver {
    /**
     * This service calls the resolvers to resolve the value to be injected in the parameter of a method.
     * @param methodParameterDecoratorResolvers The parameter decorator resolvers. All services with the tag ServiceDefinitionTagEnum.MethodParameterDecoratorResolver will be automatically injected here.
     */
    constructor(methodParameterDecoratorResolvers) {
        this.methodParameterDecoratorResolvers = methodParameterDecoratorResolvers;
    }
    /**
     * This method calls the parameter decorator resolver that supports the type of the decorator and resolves the value to be injected in the parameter.
     * @param methodArgument The method argument created by the decorator.
     * @param request The request
     * @param routeParameters The router parameters
     * @param identity The identity making the request
     */
    resolve(methodArgument, request, routeParameters, identity) {
        for (const methodParameterDecoratorResolver of this.methodParameterDecoratorResolvers) {
            if (methodParameterDecoratorResolver.supports(methodArgument)) {
                return methodParameterDecoratorResolver.resolve(methodArgument, request, routeParameters, identity);
            }
        }
        return Promise.resolve(null);
    }
};
ControllerMethodParameterDecoratorResolver = __decorate([
    (0, tsyringe_1.injectable)(),
    __param(0, (0, tsyringe_1.injectAll)(common_1.ServiceDefinitionTagEnum.MethodParameterDecoratorResolver)),
    __metadata("design:paramtypes", [Array])
], ControllerMethodParameterDecoratorResolver);
exports.ControllerMethodParameterDecoratorResolver = ControllerMethodParameterDecoratorResolver;
//# sourceMappingURL=controller-method-parameter-decorator.resolver.js.map