"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.route = void 0;
/**
 * The route decorator can be used on a method to register this method as a route of the controller in the router.
 * @param httpMethod The http method of the route
 * @param path The part of the path following the base path of the controller. For path parameters use the colons. (ie: resources/:id)
 */
const route = (httpMethod, path) => {
    return (
    /**
     * The class on which the decorator is used.
     */
    target, 
    /**
     * The method on which the decorator is used.
     */
    propertyKey, 
    /**
     * The descriptor of the property.
     */
    descriptor) => {
        // Verify that the object target.constructor.prototype["__metadata__"]["methods"][propertyKey]["route"] exists or we create it.
        // This object is a convention defined by Pristine on where to save the route decorator information and is used in the router to retrieve that information.
        if (target.constructor.prototype.hasOwnProperty("__metadata__") === false) {
            target.constructor.prototype["__metadata__"] = {};
        }
        if (target.constructor.prototype["__metadata__"].hasOwnProperty("methods") === false) {
            target.constructor.prototype["__metadata__"]["methods"] = {};
        }
        if (target.constructor.prototype["__metadata__"]["methods"].hasOwnProperty(propertyKey) === false) {
            target.constructor.prototype["__metadata__"]["methods"][propertyKey] = {};
        }
        // Set the route.
        const route = {
            httpMethod,
            methodKeyname: propertyKey,
            path
        };
        target.constructor.prototype["__metadata__"]["methods"][propertyKey]["route"] = route;
    };
};
exports.route = route;
//# sourceMappingURL=route.decorator.js.map